// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/telemetry-message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2ftelemetry_2dmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2ftelemetry_2dmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2ftelemetry_2dmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2ftelemetry_2dmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2ftelemetry_2dmessage_2eproto;
namespace ns3 {
class TelemetryMessage;
struct TelemetryMessageDefaultTypeInternal;
extern TelemetryMessageDefaultTypeInternal _TelemetryMessage_default_instance_;
class TelemetryMessage_BatteryInfo;
struct TelemetryMessage_BatteryInfoDefaultTypeInternal;
extern TelemetryMessage_BatteryInfoDefaultTypeInternal _TelemetryMessage_BatteryInfo_default_instance_;
class TelemetryMessage_PositionInfo;
struct TelemetryMessage_PositionInfoDefaultTypeInternal;
extern TelemetryMessage_PositionInfoDefaultTypeInternal _TelemetryMessage_PositionInfo_default_instance_;
class TelemetryMessage_PositionVelocityNed;
struct TelemetryMessage_PositionVelocityNedDefaultTypeInternal;
extern TelemetryMessage_PositionVelocityNedDefaultTypeInternal _TelemetryMessage_PositionVelocityNed_default_instance_;
class TelemetryMessage_PositionVelocityNed_PositionNed;
struct TelemetryMessage_PositionVelocityNed_PositionNedDefaultTypeInternal;
extern TelemetryMessage_PositionVelocityNed_PositionNedDefaultTypeInternal _TelemetryMessage_PositionVelocityNed_PositionNed_default_instance_;
class TelemetryMessage_PositionVelocityNed_VelocityNed;
struct TelemetryMessage_PositionVelocityNed_VelocityNedDefaultTypeInternal;
extern TelemetryMessage_PositionVelocityNed_VelocityNedDefaultTypeInternal _TelemetryMessage_PositionVelocityNed_VelocityNed_default_instance_;
}  // namespace ns3
PROTOBUF_NAMESPACE_OPEN
template<> ::ns3::TelemetryMessage* Arena::CreateMaybeMessage<::ns3::TelemetryMessage>(Arena*);
template<> ::ns3::TelemetryMessage_BatteryInfo* Arena::CreateMaybeMessage<::ns3::TelemetryMessage_BatteryInfo>(Arena*);
template<> ::ns3::TelemetryMessage_PositionInfo* Arena::CreateMaybeMessage<::ns3::TelemetryMessage_PositionInfo>(Arena*);
template<> ::ns3::TelemetryMessage_PositionVelocityNed* Arena::CreateMaybeMessage<::ns3::TelemetryMessage_PositionVelocityNed>(Arena*);
template<> ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* Arena::CreateMaybeMessage<::ns3::TelemetryMessage_PositionVelocityNed_PositionNed>(Arena*);
template<> ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* Arena::CreateMaybeMessage<::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ns3 {

enum TelemetryMessage_UpdateType : int {
  TelemetryMessage_UpdateType_BatteryUpdate = 0,
  TelemetryMessage_UpdateType_PositionUpdate = 1,
  TelemetryMessage_UpdateType_PositionVelocityNedUpdate = 2,
  TelemetryMessage_UpdateType_TelemetryMessage_UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TelemetryMessage_UpdateType_TelemetryMessage_UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TelemetryMessage_UpdateType_IsValid(int value);
constexpr TelemetryMessage_UpdateType TelemetryMessage_UpdateType_UpdateType_MIN = TelemetryMessage_UpdateType_BatteryUpdate;
constexpr TelemetryMessage_UpdateType TelemetryMessage_UpdateType_UpdateType_MAX = TelemetryMessage_UpdateType_PositionVelocityNedUpdate;
constexpr int TelemetryMessage_UpdateType_UpdateType_ARRAYSIZE = TelemetryMessage_UpdateType_UpdateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryMessage_UpdateType_descriptor();
template<typename T>
inline const std::string& TelemetryMessage_UpdateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TelemetryMessage_UpdateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TelemetryMessage_UpdateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TelemetryMessage_UpdateType_descriptor(), enum_t_value);
}
inline bool TelemetryMessage_UpdateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TelemetryMessage_UpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TelemetryMessage_UpdateType>(
    TelemetryMessage_UpdateType_descriptor(), name, value);
}
// ===================================================================

class TelemetryMessage_BatteryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3.TelemetryMessage.BatteryInfo) */ {
 public:
  inline TelemetryMessage_BatteryInfo() : TelemetryMessage_BatteryInfo(nullptr) {}
  ~TelemetryMessage_BatteryInfo() override;
  explicit constexpr TelemetryMessage_BatteryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryMessage_BatteryInfo(const TelemetryMessage_BatteryInfo& from);
  TelemetryMessage_BatteryInfo(TelemetryMessage_BatteryInfo&& from) noexcept
    : TelemetryMessage_BatteryInfo() {
    *this = ::std::move(from);
  }

  inline TelemetryMessage_BatteryInfo& operator=(const TelemetryMessage_BatteryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryMessage_BatteryInfo& operator=(TelemetryMessage_BatteryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryMessage_BatteryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryMessage_BatteryInfo* internal_default_instance() {
    return reinterpret_cast<const TelemetryMessage_BatteryInfo*>(
               &_TelemetryMessage_BatteryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TelemetryMessage_BatteryInfo& a, TelemetryMessage_BatteryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryMessage_BatteryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryMessage_BatteryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryMessage_BatteryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryMessage_BatteryInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryMessage_BatteryInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryMessage_BatteryInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryMessage_BatteryInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3.TelemetryMessage.BatteryInfo";
  }
  protected:
  explicit TelemetryMessage_BatteryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVoltageVFieldNumber = 2,
    kRemainingPercentFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // float voltage_v = 2;
  void clear_voltage_v();
  float voltage_v() const;
  void set_voltage_v(float value);
  private:
  float _internal_voltage_v() const;
  void _internal_set_voltage_v(float value);
  public:

  // float remaining_percent = 3;
  void clear_remaining_percent();
  float remaining_percent() const;
  void set_remaining_percent(float value);
  private:
  float _internal_remaining_percent() const;
  void _internal_set_remaining_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:ns3.TelemetryMessage.BatteryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t id_;
  float voltage_v_;
  float remaining_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2ftelemetry_2dmessage_2eproto;
};
// -------------------------------------------------------------------

class TelemetryMessage_PositionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3.TelemetryMessage.PositionInfo) */ {
 public:
  inline TelemetryMessage_PositionInfo() : TelemetryMessage_PositionInfo(nullptr) {}
  ~TelemetryMessage_PositionInfo() override;
  explicit constexpr TelemetryMessage_PositionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryMessage_PositionInfo(const TelemetryMessage_PositionInfo& from);
  TelemetryMessage_PositionInfo(TelemetryMessage_PositionInfo&& from) noexcept
    : TelemetryMessage_PositionInfo() {
    *this = ::std::move(from);
  }

  inline TelemetryMessage_PositionInfo& operator=(const TelemetryMessage_PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryMessage_PositionInfo& operator=(TelemetryMessage_PositionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryMessage_PositionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryMessage_PositionInfo* internal_default_instance() {
    return reinterpret_cast<const TelemetryMessage_PositionInfo*>(
               &_TelemetryMessage_PositionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TelemetryMessage_PositionInfo& a, TelemetryMessage_PositionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryMessage_PositionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryMessage_PositionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryMessage_PositionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryMessage_PositionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryMessage_PositionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryMessage_PositionInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryMessage_PositionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3.TelemetryMessage.PositionInfo";
  }
  protected:
  explicit TelemetryMessage_PositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 4,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // float absolute_altitude_m = 3;
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);
  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);
  public:

  // float relative_altitude_m = 4;
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);
  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:ns3.TelemetryMessage.PositionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  float relative_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2ftelemetry_2dmessage_2eproto;
};
// -------------------------------------------------------------------

class TelemetryMessage_PositionVelocityNed_PositionNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3.TelemetryMessage.PositionVelocityNed.PositionNed) */ {
 public:
  inline TelemetryMessage_PositionVelocityNed_PositionNed() : TelemetryMessage_PositionVelocityNed_PositionNed(nullptr) {}
  ~TelemetryMessage_PositionVelocityNed_PositionNed() override;
  explicit constexpr TelemetryMessage_PositionVelocityNed_PositionNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryMessage_PositionVelocityNed_PositionNed(const TelemetryMessage_PositionVelocityNed_PositionNed& from);
  TelemetryMessage_PositionVelocityNed_PositionNed(TelemetryMessage_PositionVelocityNed_PositionNed&& from) noexcept
    : TelemetryMessage_PositionVelocityNed_PositionNed() {
    *this = ::std::move(from);
  }

  inline TelemetryMessage_PositionVelocityNed_PositionNed& operator=(const TelemetryMessage_PositionVelocityNed_PositionNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryMessage_PositionVelocityNed_PositionNed& operator=(TelemetryMessage_PositionVelocityNed_PositionNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryMessage_PositionVelocityNed_PositionNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryMessage_PositionVelocityNed_PositionNed* internal_default_instance() {
    return reinterpret_cast<const TelemetryMessage_PositionVelocityNed_PositionNed*>(
               &_TelemetryMessage_PositionVelocityNed_PositionNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TelemetryMessage_PositionVelocityNed_PositionNed& a, TelemetryMessage_PositionVelocityNed_PositionNed& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryMessage_PositionVelocityNed_PositionNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryMessage_PositionVelocityNed_PositionNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryMessage_PositionVelocityNed_PositionNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryMessage_PositionVelocityNed_PositionNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryMessage_PositionVelocityNed_PositionNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryMessage_PositionVelocityNed_PositionNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryMessage_PositionVelocityNed_PositionNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3.TelemetryMessage.PositionVelocityNed.PositionNed";
  }
  protected:
  explicit TelemetryMessage_PositionVelocityNed_PositionNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMFieldNumber = 1,
    kEastMFieldNumber = 2,
    kDownMFieldNumber = 3,
  };
  // float north_m = 1;
  void clear_north_m();
  float north_m() const;
  void set_north_m(float value);
  private:
  float _internal_north_m() const;
  void _internal_set_north_m(float value);
  public:

  // float east_m = 2;
  void clear_east_m();
  float east_m() const;
  void set_east_m(float value);
  private:
  float _internal_east_m() const;
  void _internal_set_east_m(float value);
  public:

  // float down_m = 3;
  void clear_down_m();
  float down_m() const;
  void set_down_m(float value);
  private:
  float _internal_down_m() const;
  void _internal_set_down_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float north_m_;
  float east_m_;
  float down_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2ftelemetry_2dmessage_2eproto;
};
// -------------------------------------------------------------------

class TelemetryMessage_PositionVelocityNed_VelocityNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed) */ {
 public:
  inline TelemetryMessage_PositionVelocityNed_VelocityNed() : TelemetryMessage_PositionVelocityNed_VelocityNed(nullptr) {}
  ~TelemetryMessage_PositionVelocityNed_VelocityNed() override;
  explicit constexpr TelemetryMessage_PositionVelocityNed_VelocityNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryMessage_PositionVelocityNed_VelocityNed(const TelemetryMessage_PositionVelocityNed_VelocityNed& from);
  TelemetryMessage_PositionVelocityNed_VelocityNed(TelemetryMessage_PositionVelocityNed_VelocityNed&& from) noexcept
    : TelemetryMessage_PositionVelocityNed_VelocityNed() {
    *this = ::std::move(from);
  }

  inline TelemetryMessage_PositionVelocityNed_VelocityNed& operator=(const TelemetryMessage_PositionVelocityNed_VelocityNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryMessage_PositionVelocityNed_VelocityNed& operator=(TelemetryMessage_PositionVelocityNed_VelocityNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryMessage_PositionVelocityNed_VelocityNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryMessage_PositionVelocityNed_VelocityNed* internal_default_instance() {
    return reinterpret_cast<const TelemetryMessage_PositionVelocityNed_VelocityNed*>(
               &_TelemetryMessage_PositionVelocityNed_VelocityNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TelemetryMessage_PositionVelocityNed_VelocityNed& a, TelemetryMessage_PositionVelocityNed_VelocityNed& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryMessage_PositionVelocityNed_VelocityNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryMessage_PositionVelocityNed_VelocityNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryMessage_PositionVelocityNed_VelocityNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryMessage_PositionVelocityNed_VelocityNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryMessage_PositionVelocityNed_VelocityNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryMessage_PositionVelocityNed_VelocityNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryMessage_PositionVelocityNed_VelocityNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3.TelemetryMessage.PositionVelocityNed.VelocityNed";
  }
  protected:
  explicit TelemetryMessage_PositionVelocityNed_VelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNorthMSFieldNumber = 1,
    kEastMSFieldNumber = 2,
    kDownMSFieldNumber = 3,
  };
  // float north_m_s = 1;
  void clear_north_m_s();
  float north_m_s() const;
  void set_north_m_s(float value);
  private:
  float _internal_north_m_s() const;
  void _internal_set_north_m_s(float value);
  public:

  // float east_m_s = 2;
  void clear_east_m_s();
  float east_m_s() const;
  void set_east_m_s(float value);
  private:
  float _internal_east_m_s() const;
  void _internal_set_east_m_s(float value);
  public:

  // float down_m_s = 3;
  void clear_down_m_s();
  float down_m_s() const;
  void set_down_m_s(float value);
  private:
  float _internal_down_m_s() const;
  void _internal_set_down_m_s(float value);
  public:

  // @@protoc_insertion_point(class_scope:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float north_m_s_;
  float east_m_s_;
  float down_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2ftelemetry_2dmessage_2eproto;
};
// -------------------------------------------------------------------

class TelemetryMessage_PositionVelocityNed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3.TelemetryMessage.PositionVelocityNed) */ {
 public:
  inline TelemetryMessage_PositionVelocityNed() : TelemetryMessage_PositionVelocityNed(nullptr) {}
  ~TelemetryMessage_PositionVelocityNed() override;
  explicit constexpr TelemetryMessage_PositionVelocityNed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryMessage_PositionVelocityNed(const TelemetryMessage_PositionVelocityNed& from);
  TelemetryMessage_PositionVelocityNed(TelemetryMessage_PositionVelocityNed&& from) noexcept
    : TelemetryMessage_PositionVelocityNed() {
    *this = ::std::move(from);
  }

  inline TelemetryMessage_PositionVelocityNed& operator=(const TelemetryMessage_PositionVelocityNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryMessage_PositionVelocityNed& operator=(TelemetryMessage_PositionVelocityNed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryMessage_PositionVelocityNed& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryMessage_PositionVelocityNed* internal_default_instance() {
    return reinterpret_cast<const TelemetryMessage_PositionVelocityNed*>(
               &_TelemetryMessage_PositionVelocityNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TelemetryMessage_PositionVelocityNed& a, TelemetryMessage_PositionVelocityNed& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryMessage_PositionVelocityNed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryMessage_PositionVelocityNed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryMessage_PositionVelocityNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryMessage_PositionVelocityNed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryMessage_PositionVelocityNed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryMessage_PositionVelocityNed& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryMessage_PositionVelocityNed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3.TelemetryMessage.PositionVelocityNed";
  }
  protected:
  explicit TelemetryMessage_PositionVelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TelemetryMessage_PositionVelocityNed_PositionNed PositionNed;
  typedef TelemetryMessage_PositionVelocityNed_VelocityNed VelocityNed;

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kVelocityFieldNumber = 2,
  };
  // .ns3.TelemetryMessage.PositionVelocityNed.PositionNed position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed& position() const;
  PROTOBUF_NODISCARD ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* release_position();
  ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* mutable_position();
  void set_allocated_position(::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* position);
  private:
  const ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed& _internal_position() const;
  ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* position);
  ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* unsafe_arena_release_position();

  // .ns3.TelemetryMessage.PositionVelocityNed.VelocityNed velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed& velocity() const;
  PROTOBUF_NODISCARD ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* release_velocity();
  ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* mutable_velocity();
  void set_allocated_velocity(::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* velocity);
  private:
  const ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed& _internal_velocity() const;
  ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* velocity);
  ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* unsafe_arena_release_velocity();

  // @@protoc_insertion_point(class_scope:ns3.TelemetryMessage.PositionVelocityNed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* position_;
  ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2ftelemetry_2dmessage_2eproto;
};
// -------------------------------------------------------------------

class TelemetryMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3.TelemetryMessage) */ {
 public:
  inline TelemetryMessage() : TelemetryMessage(nullptr) {}
  ~TelemetryMessage() override;
  explicit constexpr TelemetryMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TelemetryMessage(const TelemetryMessage& from);
  TelemetryMessage(TelemetryMessage&& from) noexcept
    : TelemetryMessage() {
    *this = ::std::move(from);
  }

  inline TelemetryMessage& operator=(const TelemetryMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryMessage& operator=(TelemetryMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TelemetryMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TelemetryMessage* internal_default_instance() {
    return reinterpret_cast<const TelemetryMessage*>(
               &_TelemetryMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TelemetryMessage& a, TelemetryMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TelemetryMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TelemetryMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TelemetryMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TelemetryMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TelemetryMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3.TelemetryMessage";
  }
  protected:
  explicit TelemetryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TelemetryMessage_BatteryInfo BatteryInfo;
  typedef TelemetryMessage_PositionInfo PositionInfo;
  typedef TelemetryMessage_PositionVelocityNed PositionVelocityNed;

  typedef TelemetryMessage_UpdateType UpdateType;
  static constexpr UpdateType BatteryUpdate =
    TelemetryMessage_UpdateType_BatteryUpdate;
  static constexpr UpdateType PositionUpdate =
    TelemetryMessage_UpdateType_PositionUpdate;
  static constexpr UpdateType PositionVelocityNedUpdate =
    TelemetryMessage_UpdateType_PositionVelocityNedUpdate;
  static inline bool UpdateType_IsValid(int value) {
    return TelemetryMessage_UpdateType_IsValid(value);
  }
  static constexpr UpdateType UpdateType_MIN =
    TelemetryMessage_UpdateType_UpdateType_MIN;
  static constexpr UpdateType UpdateType_MAX =
    TelemetryMessage_UpdateType_UpdateType_MAX;
  static constexpr int UpdateType_ARRAYSIZE =
    TelemetryMessage_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UpdateType_descriptor() {
    return TelemetryMessage_UpdateType_descriptor();
  }
  template<typename T>
  static inline const std::string& UpdateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UpdateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UpdateType_Name.");
    return TelemetryMessage_UpdateType_Name(enum_t_value);
  }
  static inline bool UpdateType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UpdateType* value) {
    return TelemetryMessage_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLastUpdatedFieldNumber = 5,
    kBatteryFieldNumber = 6,
    kPositionFieldNumber = 7,
    kPositionVelocityNedFieldNumber = 8,
    kUavArrivalTimeFieldNumber = 2,
    kUavIDFieldNumber = 1,
    kUpdateFieldNumber = 4,
    kGcsArrivalTimeFieldNumber = 3,
  };
  // .google.protobuf.Timestamp last_updated = 5;
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated();

  // .ns3.TelemetryMessage.BatteryInfo battery = 6;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;
  public:
  void clear_battery();
  const ::ns3::TelemetryMessage_BatteryInfo& battery() const;
  PROTOBUF_NODISCARD ::ns3::TelemetryMessage_BatteryInfo* release_battery();
  ::ns3::TelemetryMessage_BatteryInfo* mutable_battery();
  void set_allocated_battery(::ns3::TelemetryMessage_BatteryInfo* battery);
  private:
  const ::ns3::TelemetryMessage_BatteryInfo& _internal_battery() const;
  ::ns3::TelemetryMessage_BatteryInfo* _internal_mutable_battery();
  public:
  void unsafe_arena_set_allocated_battery(
      ::ns3::TelemetryMessage_BatteryInfo* battery);
  ::ns3::TelemetryMessage_BatteryInfo* unsafe_arena_release_battery();

  // .ns3.TelemetryMessage.PositionInfo position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ns3::TelemetryMessage_PositionInfo& position() const;
  PROTOBUF_NODISCARD ::ns3::TelemetryMessage_PositionInfo* release_position();
  ::ns3::TelemetryMessage_PositionInfo* mutable_position();
  void set_allocated_position(::ns3::TelemetryMessage_PositionInfo* position);
  private:
  const ::ns3::TelemetryMessage_PositionInfo& _internal_position() const;
  ::ns3::TelemetryMessage_PositionInfo* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ns3::TelemetryMessage_PositionInfo* position);
  ::ns3::TelemetryMessage_PositionInfo* unsafe_arena_release_position();

  // .ns3.TelemetryMessage.PositionVelocityNed positionVelocityNed = 8;
  bool has_positionvelocityned() const;
  private:
  bool _internal_has_positionvelocityned() const;
  public:
  void clear_positionvelocityned();
  const ::ns3::TelemetryMessage_PositionVelocityNed& positionvelocityned() const;
  PROTOBUF_NODISCARD ::ns3::TelemetryMessage_PositionVelocityNed* release_positionvelocityned();
  ::ns3::TelemetryMessage_PositionVelocityNed* mutable_positionvelocityned();
  void set_allocated_positionvelocityned(::ns3::TelemetryMessage_PositionVelocityNed* positionvelocityned);
  private:
  const ::ns3::TelemetryMessage_PositionVelocityNed& _internal_positionvelocityned() const;
  ::ns3::TelemetryMessage_PositionVelocityNed* _internal_mutable_positionvelocityned();
  public:
  void unsafe_arena_set_allocated_positionvelocityned(
      ::ns3::TelemetryMessage_PositionVelocityNed* positionvelocityned);
  ::ns3::TelemetryMessage_PositionVelocityNed* unsafe_arena_release_positionvelocityned();

  // int64 uavArrivalTime = 2;
  void clear_uavarrivaltime();
  int64_t uavarrivaltime() const;
  void set_uavarrivaltime(int64_t value);
  private:
  int64_t _internal_uavarrivaltime() const;
  void _internal_set_uavarrivaltime(int64_t value);
  public:

  // int32 uavID = 1;
  void clear_uavid();
  int32_t uavid() const;
  void set_uavid(int32_t value);
  private:
  int32_t _internal_uavid() const;
  void _internal_set_uavid(int32_t value);
  public:

  // .ns3.TelemetryMessage.UpdateType update = 4;
  void clear_update();
  ::ns3::TelemetryMessage_UpdateType update() const;
  void set_update(::ns3::TelemetryMessage_UpdateType value);
  private:
  ::ns3::TelemetryMessage_UpdateType _internal_update() const;
  void _internal_set_update(::ns3::TelemetryMessage_UpdateType value);
  public:

  // int64 gcsArrivalTime = 3;
  void clear_gcsarrivaltime();
  int64_t gcsarrivaltime() const;
  void set_gcsarrivaltime(int64_t value);
  private:
  int64_t _internal_gcsarrivaltime() const;
  void _internal_set_gcsarrivaltime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ns3.TelemetryMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
  ::ns3::TelemetryMessage_BatteryInfo* battery_;
  ::ns3::TelemetryMessage_PositionInfo* position_;
  ::ns3::TelemetryMessage_PositionVelocityNed* positionvelocityned_;
  int64_t uavarrivaltime_;
  int32_t uavid_;
  int update_;
  int64_t gcsarrivaltime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2ftelemetry_2dmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TelemetryMessage_BatteryInfo

// uint32 id = 1;
inline void TelemetryMessage_BatteryInfo::clear_id() {
  id_ = 0u;
}
inline uint32_t TelemetryMessage_BatteryInfo::_internal_id() const {
  return id_;
}
inline uint32_t TelemetryMessage_BatteryInfo::id() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.BatteryInfo.id)
  return _internal_id();
}
inline void TelemetryMessage_BatteryInfo::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void TelemetryMessage_BatteryInfo::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.BatteryInfo.id)
}

// float voltage_v = 2;
inline void TelemetryMessage_BatteryInfo::clear_voltage_v() {
  voltage_v_ = 0;
}
inline float TelemetryMessage_BatteryInfo::_internal_voltage_v() const {
  return voltage_v_;
}
inline float TelemetryMessage_BatteryInfo::voltage_v() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.BatteryInfo.voltage_v)
  return _internal_voltage_v();
}
inline void TelemetryMessage_BatteryInfo::_internal_set_voltage_v(float value) {
  
  voltage_v_ = value;
}
inline void TelemetryMessage_BatteryInfo::set_voltage_v(float value) {
  _internal_set_voltage_v(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.BatteryInfo.voltage_v)
}

// float remaining_percent = 3;
inline void TelemetryMessage_BatteryInfo::clear_remaining_percent() {
  remaining_percent_ = 0;
}
inline float TelemetryMessage_BatteryInfo::_internal_remaining_percent() const {
  return remaining_percent_;
}
inline float TelemetryMessage_BatteryInfo::remaining_percent() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.BatteryInfo.remaining_percent)
  return _internal_remaining_percent();
}
inline void TelemetryMessage_BatteryInfo::_internal_set_remaining_percent(float value) {
  
  remaining_percent_ = value;
}
inline void TelemetryMessage_BatteryInfo::set_remaining_percent(float value) {
  _internal_set_remaining_percent(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.BatteryInfo.remaining_percent)
}

// -------------------------------------------------------------------

// TelemetryMessage_PositionInfo

// double latitude_deg = 1;
inline void TelemetryMessage_PositionInfo::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double TelemetryMessage_PositionInfo::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double TelemetryMessage_PositionInfo::latitude_deg() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionInfo.latitude_deg)
  return _internal_latitude_deg();
}
inline void TelemetryMessage_PositionInfo::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void TelemetryMessage_PositionInfo::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionInfo.latitude_deg)
}

// double longitude_deg = 2;
inline void TelemetryMessage_PositionInfo::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double TelemetryMessage_PositionInfo::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double TelemetryMessage_PositionInfo::longitude_deg() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionInfo.longitude_deg)
  return _internal_longitude_deg();
}
inline void TelemetryMessage_PositionInfo::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void TelemetryMessage_PositionInfo::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionInfo.longitude_deg)
}

// float absolute_altitude_m = 3;
inline void TelemetryMessage_PositionInfo::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float TelemetryMessage_PositionInfo::_internal_absolute_altitude_m() const {
  return absolute_altitude_m_;
}
inline float TelemetryMessage_PositionInfo::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionInfo.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void TelemetryMessage_PositionInfo::_internal_set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
}
inline void TelemetryMessage_PositionInfo::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionInfo.absolute_altitude_m)
}

// float relative_altitude_m = 4;
inline void TelemetryMessage_PositionInfo::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float TelemetryMessage_PositionInfo::_internal_relative_altitude_m() const {
  return relative_altitude_m_;
}
inline float TelemetryMessage_PositionInfo::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionInfo.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void TelemetryMessage_PositionInfo::_internal_set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
}
inline void TelemetryMessage_PositionInfo::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionInfo.relative_altitude_m)
}

// -------------------------------------------------------------------

// TelemetryMessage_PositionVelocityNed_PositionNed

// float north_m = 1;
inline void TelemetryMessage_PositionVelocityNed_PositionNed::clear_north_m() {
  north_m_ = 0;
}
inline float TelemetryMessage_PositionVelocityNed_PositionNed::_internal_north_m() const {
  return north_m_;
}
inline float TelemetryMessage_PositionVelocityNed_PositionNed::north_m() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionVelocityNed.PositionNed.north_m)
  return _internal_north_m();
}
inline void TelemetryMessage_PositionVelocityNed_PositionNed::_internal_set_north_m(float value) {
  
  north_m_ = value;
}
inline void TelemetryMessage_PositionVelocityNed_PositionNed::set_north_m(float value) {
  _internal_set_north_m(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionVelocityNed.PositionNed.north_m)
}

// float east_m = 2;
inline void TelemetryMessage_PositionVelocityNed_PositionNed::clear_east_m() {
  east_m_ = 0;
}
inline float TelemetryMessage_PositionVelocityNed_PositionNed::_internal_east_m() const {
  return east_m_;
}
inline float TelemetryMessage_PositionVelocityNed_PositionNed::east_m() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionVelocityNed.PositionNed.east_m)
  return _internal_east_m();
}
inline void TelemetryMessage_PositionVelocityNed_PositionNed::_internal_set_east_m(float value) {
  
  east_m_ = value;
}
inline void TelemetryMessage_PositionVelocityNed_PositionNed::set_east_m(float value) {
  _internal_set_east_m(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionVelocityNed.PositionNed.east_m)
}

// float down_m = 3;
inline void TelemetryMessage_PositionVelocityNed_PositionNed::clear_down_m() {
  down_m_ = 0;
}
inline float TelemetryMessage_PositionVelocityNed_PositionNed::_internal_down_m() const {
  return down_m_;
}
inline float TelemetryMessage_PositionVelocityNed_PositionNed::down_m() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionVelocityNed.PositionNed.down_m)
  return _internal_down_m();
}
inline void TelemetryMessage_PositionVelocityNed_PositionNed::_internal_set_down_m(float value) {
  
  down_m_ = value;
}
inline void TelemetryMessage_PositionVelocityNed_PositionNed::set_down_m(float value) {
  _internal_set_down_m(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionVelocityNed.PositionNed.down_m)
}

// -------------------------------------------------------------------

// TelemetryMessage_PositionVelocityNed_VelocityNed

// float north_m_s = 1;
inline void TelemetryMessage_PositionVelocityNed_VelocityNed::clear_north_m_s() {
  north_m_s_ = 0;
}
inline float TelemetryMessage_PositionVelocityNed_VelocityNed::_internal_north_m_s() const {
  return north_m_s_;
}
inline float TelemetryMessage_PositionVelocityNed_VelocityNed::north_m_s() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed.north_m_s)
  return _internal_north_m_s();
}
inline void TelemetryMessage_PositionVelocityNed_VelocityNed::_internal_set_north_m_s(float value) {
  
  north_m_s_ = value;
}
inline void TelemetryMessage_PositionVelocityNed_VelocityNed::set_north_m_s(float value) {
  _internal_set_north_m_s(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed.north_m_s)
}

// float east_m_s = 2;
inline void TelemetryMessage_PositionVelocityNed_VelocityNed::clear_east_m_s() {
  east_m_s_ = 0;
}
inline float TelemetryMessage_PositionVelocityNed_VelocityNed::_internal_east_m_s() const {
  return east_m_s_;
}
inline float TelemetryMessage_PositionVelocityNed_VelocityNed::east_m_s() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed.east_m_s)
  return _internal_east_m_s();
}
inline void TelemetryMessage_PositionVelocityNed_VelocityNed::_internal_set_east_m_s(float value) {
  
  east_m_s_ = value;
}
inline void TelemetryMessage_PositionVelocityNed_VelocityNed::set_east_m_s(float value) {
  _internal_set_east_m_s(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed.east_m_s)
}

// float down_m_s = 3;
inline void TelemetryMessage_PositionVelocityNed_VelocityNed::clear_down_m_s() {
  down_m_s_ = 0;
}
inline float TelemetryMessage_PositionVelocityNed_VelocityNed::_internal_down_m_s() const {
  return down_m_s_;
}
inline float TelemetryMessage_PositionVelocityNed_VelocityNed::down_m_s() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed.down_m_s)
  return _internal_down_m_s();
}
inline void TelemetryMessage_PositionVelocityNed_VelocityNed::_internal_set_down_m_s(float value) {
  
  down_m_s_ = value;
}
inline void TelemetryMessage_PositionVelocityNed_VelocityNed::set_down_m_s(float value) {
  _internal_set_down_m_s(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed.down_m_s)
}

// -------------------------------------------------------------------

// TelemetryMessage_PositionVelocityNed

// .ns3.TelemetryMessage.PositionVelocityNed.PositionNed position = 1;
inline bool TelemetryMessage_PositionVelocityNed::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool TelemetryMessage_PositionVelocityNed::has_position() const {
  return _internal_has_position();
}
inline void TelemetryMessage_PositionVelocityNed::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed& TelemetryMessage_PositionVelocityNed::_internal_position() const {
  const ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed&>(
      ::ns3::_TelemetryMessage_PositionVelocityNed_PositionNed_default_instance_);
}
inline const ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed& TelemetryMessage_PositionVelocityNed::position() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionVelocityNed.position)
  return _internal_position();
}
inline void TelemetryMessage_PositionVelocityNed::unsafe_arena_set_allocated_position(
    ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3.TelemetryMessage.PositionVelocityNed.position)
}
inline ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* TelemetryMessage_PositionVelocityNed::release_position() {
  
  ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* TelemetryMessage_PositionVelocityNed::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ns3.TelemetryMessage.PositionVelocityNed.position)
  
  ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* TelemetryMessage_PositionVelocityNed::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3::TelemetryMessage_PositionVelocityNed_PositionNed>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* TelemetryMessage_PositionVelocityNed::mutable_position() {
  ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ns3.TelemetryMessage.PositionVelocityNed.position)
  return _msg;
}
inline void TelemetryMessage_PositionVelocityNed::set_allocated_position(::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ns3::TelemetryMessage_PositionVelocityNed_PositionNed>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ns3.TelemetryMessage.PositionVelocityNed.position)
}

// .ns3.TelemetryMessage.PositionVelocityNed.VelocityNed velocity = 2;
inline bool TelemetryMessage_PositionVelocityNed::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool TelemetryMessage_PositionVelocityNed::has_velocity() const {
  return _internal_has_velocity();
}
inline void TelemetryMessage_PositionVelocityNed::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed& TelemetryMessage_PositionVelocityNed::_internal_velocity() const {
  const ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed&>(
      ::ns3::_TelemetryMessage_PositionVelocityNed_VelocityNed_default_instance_);
}
inline const ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed& TelemetryMessage_PositionVelocityNed::velocity() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.PositionVelocityNed.velocity)
  return _internal_velocity();
}
inline void TelemetryMessage_PositionVelocityNed::unsafe_arena_set_allocated_velocity(
    ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3.TelemetryMessage.PositionVelocityNed.velocity)
}
inline ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* TelemetryMessage_PositionVelocityNed::release_velocity() {
  
  ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* TelemetryMessage_PositionVelocityNed::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:ns3.TelemetryMessage.PositionVelocityNed.velocity)
  
  ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* TelemetryMessage_PositionVelocityNed::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* TelemetryMessage_PositionVelocityNed::mutable_velocity() {
  ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:ns3.TelemetryMessage.PositionVelocityNed.velocity)
  return _msg;
}
inline void TelemetryMessage_PositionVelocityNed::set_allocated_velocity(::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed>::GetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:ns3.TelemetryMessage.PositionVelocityNed.velocity)
}

// -------------------------------------------------------------------

// TelemetryMessage

// int32 uavID = 1;
inline void TelemetryMessage::clear_uavid() {
  uavid_ = 0;
}
inline int32_t TelemetryMessage::_internal_uavid() const {
  return uavid_;
}
inline int32_t TelemetryMessage::uavid() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.uavID)
  return _internal_uavid();
}
inline void TelemetryMessage::_internal_set_uavid(int32_t value) {
  
  uavid_ = value;
}
inline void TelemetryMessage::set_uavid(int32_t value) {
  _internal_set_uavid(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.uavID)
}

// int64 uavArrivalTime = 2;
inline void TelemetryMessage::clear_uavarrivaltime() {
  uavarrivaltime_ = int64_t{0};
}
inline int64_t TelemetryMessage::_internal_uavarrivaltime() const {
  return uavarrivaltime_;
}
inline int64_t TelemetryMessage::uavarrivaltime() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.uavArrivalTime)
  return _internal_uavarrivaltime();
}
inline void TelemetryMessage::_internal_set_uavarrivaltime(int64_t value) {
  
  uavarrivaltime_ = value;
}
inline void TelemetryMessage::set_uavarrivaltime(int64_t value) {
  _internal_set_uavarrivaltime(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.uavArrivalTime)
}

// int64 gcsArrivalTime = 3;
inline void TelemetryMessage::clear_gcsarrivaltime() {
  gcsarrivaltime_ = int64_t{0};
}
inline int64_t TelemetryMessage::_internal_gcsarrivaltime() const {
  return gcsarrivaltime_;
}
inline int64_t TelemetryMessage::gcsarrivaltime() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.gcsArrivalTime)
  return _internal_gcsarrivaltime();
}
inline void TelemetryMessage::_internal_set_gcsarrivaltime(int64_t value) {
  
  gcsarrivaltime_ = value;
}
inline void TelemetryMessage::set_gcsarrivaltime(int64_t value) {
  _internal_set_gcsarrivaltime(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.gcsArrivalTime)
}

// .ns3.TelemetryMessage.UpdateType update = 4;
inline void TelemetryMessage::clear_update() {
  update_ = 0;
}
inline ::ns3::TelemetryMessage_UpdateType TelemetryMessage::_internal_update() const {
  return static_cast< ::ns3::TelemetryMessage_UpdateType >(update_);
}
inline ::ns3::TelemetryMessage_UpdateType TelemetryMessage::update() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.update)
  return _internal_update();
}
inline void TelemetryMessage::_internal_set_update(::ns3::TelemetryMessage_UpdateType value) {
  
  update_ = value;
}
inline void TelemetryMessage::set_update(::ns3::TelemetryMessage_UpdateType value) {
  _internal_set_update(value);
  // @@protoc_insertion_point(field_set:ns3.TelemetryMessage.update)
}

// .google.protobuf.Timestamp last_updated = 5;
inline bool TelemetryMessage::_internal_has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != nullptr;
}
inline bool TelemetryMessage::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TelemetryMessage::_internal_last_updated() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TelemetryMessage::last_updated() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.last_updated)
  return _internal_last_updated();
}
inline void TelemetryMessage::unsafe_arena_set_allocated_last_updated(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3.TelemetryMessage.last_updated)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryMessage::release_last_updated() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryMessage::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:ns3.TelemetryMessage.last_updated)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryMessage::_internal_mutable_last_updated() {
  
  if (last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_updated_ = p;
  }
  return last_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TelemetryMessage::mutable_last_updated() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:ns3.TelemetryMessage.last_updated)
  return _msg;
}
inline void TelemetryMessage::set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated));
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:ns3.TelemetryMessage.last_updated)
}

// .ns3.TelemetryMessage.BatteryInfo battery = 6;
inline bool TelemetryMessage::_internal_has_battery() const {
  return this != internal_default_instance() && battery_ != nullptr;
}
inline bool TelemetryMessage::has_battery() const {
  return _internal_has_battery();
}
inline void TelemetryMessage::clear_battery() {
  if (GetArenaForAllocation() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
}
inline const ::ns3::TelemetryMessage_BatteryInfo& TelemetryMessage::_internal_battery() const {
  const ::ns3::TelemetryMessage_BatteryInfo* p = battery_;
  return p != nullptr ? *p : reinterpret_cast<const ::ns3::TelemetryMessage_BatteryInfo&>(
      ::ns3::_TelemetryMessage_BatteryInfo_default_instance_);
}
inline const ::ns3::TelemetryMessage_BatteryInfo& TelemetryMessage::battery() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.battery)
  return _internal_battery();
}
inline void TelemetryMessage::unsafe_arena_set_allocated_battery(
    ::ns3::TelemetryMessage_BatteryInfo* battery) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battery_);
  }
  battery_ = battery;
  if (battery) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3.TelemetryMessage.battery)
}
inline ::ns3::TelemetryMessage_BatteryInfo* TelemetryMessage::release_battery() {
  
  ::ns3::TelemetryMessage_BatteryInfo* temp = battery_;
  battery_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ns3::TelemetryMessage_BatteryInfo* TelemetryMessage::unsafe_arena_release_battery() {
  // @@protoc_insertion_point(field_release:ns3.TelemetryMessage.battery)
  
  ::ns3::TelemetryMessage_BatteryInfo* temp = battery_;
  battery_ = nullptr;
  return temp;
}
inline ::ns3::TelemetryMessage_BatteryInfo* TelemetryMessage::_internal_mutable_battery() {
  
  if (battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3::TelemetryMessage_BatteryInfo>(GetArenaForAllocation());
    battery_ = p;
  }
  return battery_;
}
inline ::ns3::TelemetryMessage_BatteryInfo* TelemetryMessage::mutable_battery() {
  ::ns3::TelemetryMessage_BatteryInfo* _msg = _internal_mutable_battery();
  // @@protoc_insertion_point(field_mutable:ns3.TelemetryMessage.battery)
  return _msg;
}
inline void TelemetryMessage::set_allocated_battery(::ns3::TelemetryMessage_BatteryInfo* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete battery_;
  }
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ns3::TelemetryMessage_BatteryInfo>::GetOwningArena(battery);
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    
  } else {
    
  }
  battery_ = battery;
  // @@protoc_insertion_point(field_set_allocated:ns3.TelemetryMessage.battery)
}

// .ns3.TelemetryMessage.PositionInfo position = 7;
inline bool TelemetryMessage::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool TelemetryMessage::has_position() const {
  return _internal_has_position();
}
inline void TelemetryMessage::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::ns3::TelemetryMessage_PositionInfo& TelemetryMessage::_internal_position() const {
  const ::ns3::TelemetryMessage_PositionInfo* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ns3::TelemetryMessage_PositionInfo&>(
      ::ns3::_TelemetryMessage_PositionInfo_default_instance_);
}
inline const ::ns3::TelemetryMessage_PositionInfo& TelemetryMessage::position() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.position)
  return _internal_position();
}
inline void TelemetryMessage::unsafe_arena_set_allocated_position(
    ::ns3::TelemetryMessage_PositionInfo* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3.TelemetryMessage.position)
}
inline ::ns3::TelemetryMessage_PositionInfo* TelemetryMessage::release_position() {
  
  ::ns3::TelemetryMessage_PositionInfo* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ns3::TelemetryMessage_PositionInfo* TelemetryMessage::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ns3.TelemetryMessage.position)
  
  ::ns3::TelemetryMessage_PositionInfo* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ns3::TelemetryMessage_PositionInfo* TelemetryMessage::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3::TelemetryMessage_PositionInfo>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::ns3::TelemetryMessage_PositionInfo* TelemetryMessage::mutable_position() {
  ::ns3::TelemetryMessage_PositionInfo* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ns3.TelemetryMessage.position)
  return _msg;
}
inline void TelemetryMessage::set_allocated_position(::ns3::TelemetryMessage_PositionInfo* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ns3::TelemetryMessage_PositionInfo>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ns3.TelemetryMessage.position)
}

// .ns3.TelemetryMessage.PositionVelocityNed positionVelocityNed = 8;
inline bool TelemetryMessage::_internal_has_positionvelocityned() const {
  return this != internal_default_instance() && positionvelocityned_ != nullptr;
}
inline bool TelemetryMessage::has_positionvelocityned() const {
  return _internal_has_positionvelocityned();
}
inline void TelemetryMessage::clear_positionvelocityned() {
  if (GetArenaForAllocation() == nullptr && positionvelocityned_ != nullptr) {
    delete positionvelocityned_;
  }
  positionvelocityned_ = nullptr;
}
inline const ::ns3::TelemetryMessage_PositionVelocityNed& TelemetryMessage::_internal_positionvelocityned() const {
  const ::ns3::TelemetryMessage_PositionVelocityNed* p = positionvelocityned_;
  return p != nullptr ? *p : reinterpret_cast<const ::ns3::TelemetryMessage_PositionVelocityNed&>(
      ::ns3::_TelemetryMessage_PositionVelocityNed_default_instance_);
}
inline const ::ns3::TelemetryMessage_PositionVelocityNed& TelemetryMessage::positionvelocityned() const {
  // @@protoc_insertion_point(field_get:ns3.TelemetryMessage.positionVelocityNed)
  return _internal_positionvelocityned();
}
inline void TelemetryMessage::unsafe_arena_set_allocated_positionvelocityned(
    ::ns3::TelemetryMessage_PositionVelocityNed* positionvelocityned) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(positionvelocityned_);
  }
  positionvelocityned_ = positionvelocityned;
  if (positionvelocityned) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ns3.TelemetryMessage.positionVelocityNed)
}
inline ::ns3::TelemetryMessage_PositionVelocityNed* TelemetryMessage::release_positionvelocityned() {
  
  ::ns3::TelemetryMessage_PositionVelocityNed* temp = positionvelocityned_;
  positionvelocityned_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ns3::TelemetryMessage_PositionVelocityNed* TelemetryMessage::unsafe_arena_release_positionvelocityned() {
  // @@protoc_insertion_point(field_release:ns3.TelemetryMessage.positionVelocityNed)
  
  ::ns3::TelemetryMessage_PositionVelocityNed* temp = positionvelocityned_;
  positionvelocityned_ = nullptr;
  return temp;
}
inline ::ns3::TelemetryMessage_PositionVelocityNed* TelemetryMessage::_internal_mutable_positionvelocityned() {
  
  if (positionvelocityned_ == nullptr) {
    auto* p = CreateMaybeMessage<::ns3::TelemetryMessage_PositionVelocityNed>(GetArenaForAllocation());
    positionvelocityned_ = p;
  }
  return positionvelocityned_;
}
inline ::ns3::TelemetryMessage_PositionVelocityNed* TelemetryMessage::mutable_positionvelocityned() {
  ::ns3::TelemetryMessage_PositionVelocityNed* _msg = _internal_mutable_positionvelocityned();
  // @@protoc_insertion_point(field_mutable:ns3.TelemetryMessage.positionVelocityNed)
  return _msg;
}
inline void TelemetryMessage::set_allocated_positionvelocityned(::ns3::TelemetryMessage_PositionVelocityNed* positionvelocityned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete positionvelocityned_;
  }
  if (positionvelocityned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ns3::TelemetryMessage_PositionVelocityNed>::GetOwningArena(positionvelocityned);
    if (message_arena != submessage_arena) {
      positionvelocityned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positionvelocityned, submessage_arena);
    }
    
  } else {
    
  }
  positionvelocityned_ = positionvelocityned;
  // @@protoc_insertion_point(field_set_allocated:ns3.TelemetryMessage.positionVelocityNed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ns3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ns3::TelemetryMessage_UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3::TelemetryMessage_UpdateType>() {
  return ::ns3::TelemetryMessage_UpdateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2ftelemetry_2dmessage_2eproto
