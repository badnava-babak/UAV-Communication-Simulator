// See README.txt for information and build instructions.
//
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
//
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials

// [START declaration]
syntax = "proto3";
package ns3;

// [END declaration]


// [START messages]
message ControlMessage {
  int32 uavID = 1;  // Unique ID number for this person.
  int64 sentTime = 2;
  int64 receiveTime = 3;
  CommandType command = 4;

  //  Commands' parameters
  float altitude = 5;
  double latitude = 6;
  double longitude = 7;

  float yaw = 9;
  float speed = 10;

  enum CommandType {
    ARM_AND_TAKEOFF = 0;
    LAND = 1;
    GO_TO = 2;
    RETURN_TO_LAUNCH = 3;
    SET_MAX_SPEED = 4;
    UPLOAD_MISSION = 5;
    ARM_AND_START_MISSION = 6;
  }

  repeated MissionItem missionItems = 11;


  message MissionItem {
    uint32 seq = 1; /**< @brief Sequence (uint16_t) */
    uint32 frame = 2; /**< @brief The coordinate system of the waypoint (actually uint8_t) */
    uint32 command = 3; /**< @brief The scheduled action for the waypoint (actually uint16_t) */
    uint32 current = 4; /**< @brief false:0, true:1 (actually uint8_t) */
    uint32 autocontinue = 5; /**< @brief Autocontinue to next waypoint (actually uint8_t) */
    float param1 = 6; /**< @brief PARAM1, see MAV_CMD enum */
    float param2 = 7; /**< @brief PARAM2, see MAV_CMD enum */
    float param3 = 8; /**< @brief PARAM3, see MAV_CMD enum */
    float param4 = 9; /**< @brief PARAM4, see MAV_CMD enum */
    int32 x = 10; /**< @brief PARAM5 / local: x position in meters * 1e4, global: latitude in
                        degrees * 10^7 */
    int32 y = 11; /**< @brief PARAM6 / y position: local: x position in meters * 1e4, global:
                        longitude in degrees *10^7 */
    float z = 12; /**< @brief PARAM7 / local: Z coordinate, global: altitude (relative or absolute,
                      depending on frame) */
    uint32 mission_type = 13; /**< @brief Mission type (actually uint8_t) */
  };
}

// [END messages]
