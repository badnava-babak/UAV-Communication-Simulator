// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/control-message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2fcontrol_2dmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2fcontrol_2dmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2fcontrol_2dmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2fcontrol_2dmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2fcontrol_2dmessage_2eproto;
namespace ns3 {
class ControlMessage;
struct ControlMessageDefaultTypeInternal;
extern ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
class ControlMessage_MissionItem;
struct ControlMessage_MissionItemDefaultTypeInternal;
extern ControlMessage_MissionItemDefaultTypeInternal _ControlMessage_MissionItem_default_instance_;
}  // namespace ns3
PROTOBUF_NAMESPACE_OPEN
template<> ::ns3::ControlMessage* Arena::CreateMaybeMessage<::ns3::ControlMessage>(Arena*);
template<> ::ns3::ControlMessage_MissionItem* Arena::CreateMaybeMessage<::ns3::ControlMessage_MissionItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ns3 {

enum ControlMessage_CommandType : int {
  ControlMessage_CommandType_ARM_AND_TAKEOFF = 0,
  ControlMessage_CommandType_LAND = 1,
  ControlMessage_CommandType_GO_TO = 2,
  ControlMessage_CommandType_RETURN_TO_LAUNCH = 3,
  ControlMessage_CommandType_SET_MAX_SPEED = 4,
  ControlMessage_CommandType_UPLOAD_MISSION = 5,
  ControlMessage_CommandType_ARM_AND_START_MISSION = 6,
  ControlMessage_CommandType_ControlMessage_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ControlMessage_CommandType_ControlMessage_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ControlMessage_CommandType_IsValid(int value);
constexpr ControlMessage_CommandType ControlMessage_CommandType_CommandType_MIN = ControlMessage_CommandType_ARM_AND_TAKEOFF;
constexpr ControlMessage_CommandType ControlMessage_CommandType_CommandType_MAX = ControlMessage_CommandType_ARM_AND_START_MISSION;
constexpr int ControlMessage_CommandType_CommandType_ARRAYSIZE = ControlMessage_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMessage_CommandType_descriptor();
template<typename T>
inline const std::string& ControlMessage_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlMessage_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlMessage_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlMessage_CommandType_descriptor(), enum_t_value);
}
inline bool ControlMessage_CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlMessage_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlMessage_CommandType>(
    ControlMessage_CommandType_descriptor(), name, value);
}
// ===================================================================

class ControlMessage_MissionItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3.ControlMessage.MissionItem) */ {
 public:
  inline ControlMessage_MissionItem() : ControlMessage_MissionItem(nullptr) {}
  ~ControlMessage_MissionItem() override;
  explicit constexpr ControlMessage_MissionItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlMessage_MissionItem(const ControlMessage_MissionItem& from);
  ControlMessage_MissionItem(ControlMessage_MissionItem&& from) noexcept
    : ControlMessage_MissionItem() {
    *this = ::std::move(from);
  }

  inline ControlMessage_MissionItem& operator=(const ControlMessage_MissionItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlMessage_MissionItem& operator=(ControlMessage_MissionItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlMessage_MissionItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlMessage_MissionItem* internal_default_instance() {
    return reinterpret_cast<const ControlMessage_MissionItem*>(
               &_ControlMessage_MissionItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlMessage_MissionItem& a, ControlMessage_MissionItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlMessage_MissionItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlMessage_MissionItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlMessage_MissionItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlMessage_MissionItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlMessage_MissionItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlMessage_MissionItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMessage_MissionItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3.ControlMessage.MissionItem";
  }
  protected:
  explicit ControlMessage_MissionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeqFieldNumber = 1,
    kFrameFieldNumber = 2,
    kCommandFieldNumber = 3,
    kCurrentFieldNumber = 4,
    kAutocontinueFieldNumber = 5,
    kParam1FieldNumber = 6,
    kParam2FieldNumber = 7,
    kParam3FieldNumber = 8,
    kParam4FieldNumber = 9,
    kXFieldNumber = 10,
    kYFieldNumber = 11,
    kZFieldNumber = 12,
    kMissionTypeFieldNumber = 13,
  };
  // uint32 seq = 1;
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // uint32 frame = 2;
  void clear_frame();
  uint32_t frame() const;
  void set_frame(uint32_t value);
  private:
  uint32_t _internal_frame() const;
  void _internal_set_frame(uint32_t value);
  public:

  // uint32 command = 3;
  void clear_command();
  uint32_t command() const;
  void set_command(uint32_t value);
  private:
  uint32_t _internal_command() const;
  void _internal_set_command(uint32_t value);
  public:

  // uint32 current = 4;
  void clear_current();
  uint32_t current() const;
  void set_current(uint32_t value);
  private:
  uint32_t _internal_current() const;
  void _internal_set_current(uint32_t value);
  public:

  // uint32 autocontinue = 5;
  void clear_autocontinue();
  uint32_t autocontinue() const;
  void set_autocontinue(uint32_t value);
  private:
  uint32_t _internal_autocontinue() const;
  void _internal_set_autocontinue(uint32_t value);
  public:

  // float param1 = 6;
  void clear_param1();
  float param1() const;
  void set_param1(float value);
  private:
  float _internal_param1() const;
  void _internal_set_param1(float value);
  public:

  // float param2 = 7;
  void clear_param2();
  float param2() const;
  void set_param2(float value);
  private:
  float _internal_param2() const;
  void _internal_set_param2(float value);
  public:

  // float param3 = 8;
  void clear_param3();
  float param3() const;
  void set_param3(float value);
  private:
  float _internal_param3() const;
  void _internal_set_param3(float value);
  public:

  // float param4 = 9;
  void clear_param4();
  float param4() const;
  void set_param4(float value);
  private:
  float _internal_param4() const;
  void _internal_set_param4(float value);
  public:

  // int32 x = 10;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 11;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // float z = 12;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // uint32 mission_type = 13;
  void clear_mission_type();
  uint32_t mission_type() const;
  void set_mission_type(uint32_t value);
  private:
  uint32_t _internal_mission_type() const;
  void _internal_set_mission_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ns3.ControlMessage.MissionItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t seq_;
  uint32_t frame_;
  uint32_t command_;
  uint32_t current_;
  uint32_t autocontinue_;
  float param1_;
  float param2_;
  float param3_;
  float param4_;
  int32_t x_;
  int32_t y_;
  float z_;
  uint32_t mission_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fcontrol_2dmessage_2eproto;
};
// -------------------------------------------------------------------

class ControlMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ns3.ControlMessage) */ {
 public:
  inline ControlMessage() : ControlMessage(nullptr) {}
  ~ControlMessage() override;
  explicit constexpr ControlMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlMessage(const ControlMessage& from);
  ControlMessage(ControlMessage&& from) noexcept
    : ControlMessage() {
    *this = ::std::move(from);
  }

  inline ControlMessage& operator=(const ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlMessage& operator=(ControlMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlMessage* internal_default_instance() {
    return reinterpret_cast<const ControlMessage*>(
               &_ControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlMessage& a, ControlMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ns3.ControlMessage";
  }
  protected:
  explicit ControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlMessage_MissionItem MissionItem;

  typedef ControlMessage_CommandType CommandType;
  static constexpr CommandType ARM_AND_TAKEOFF =
    ControlMessage_CommandType_ARM_AND_TAKEOFF;
  static constexpr CommandType LAND =
    ControlMessage_CommandType_LAND;
  static constexpr CommandType GO_TO =
    ControlMessage_CommandType_GO_TO;
  static constexpr CommandType RETURN_TO_LAUNCH =
    ControlMessage_CommandType_RETURN_TO_LAUNCH;
  static constexpr CommandType SET_MAX_SPEED =
    ControlMessage_CommandType_SET_MAX_SPEED;
  static constexpr CommandType UPLOAD_MISSION =
    ControlMessage_CommandType_UPLOAD_MISSION;
  static constexpr CommandType ARM_AND_START_MISSION =
    ControlMessage_CommandType_ARM_AND_START_MISSION;
  static inline bool CommandType_IsValid(int value) {
    return ControlMessage_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    ControlMessage_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    ControlMessage_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    ControlMessage_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return ControlMessage_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return ControlMessage_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandType* value) {
    return ControlMessage_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMissionItemsFieldNumber = 11,
    kSentTimeFieldNumber = 2,
    kUavIDFieldNumber = 1,
    kCommandFieldNumber = 4,
    kReceiveTimeFieldNumber = 3,
    kLatitudeFieldNumber = 6,
    kLongitudeFieldNumber = 7,
    kAltitudeFieldNumber = 5,
    kYawFieldNumber = 9,
    kSpeedFieldNumber = 10,
  };
  // repeated .ns3.ControlMessage.MissionItem missionItems = 11;
  int missionitems_size() const;
  private:
  int _internal_missionitems_size() const;
  public:
  void clear_missionitems();
  ::ns3::ControlMessage_MissionItem* mutable_missionitems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3::ControlMessage_MissionItem >*
      mutable_missionitems();
  private:
  const ::ns3::ControlMessage_MissionItem& _internal_missionitems(int index) const;
  ::ns3::ControlMessage_MissionItem* _internal_add_missionitems();
  public:
  const ::ns3::ControlMessage_MissionItem& missionitems(int index) const;
  ::ns3::ControlMessage_MissionItem* add_missionitems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3::ControlMessage_MissionItem >&
      missionitems() const;

  // int64 sentTime = 2;
  void clear_senttime();
  int64_t senttime() const;
  void set_senttime(int64_t value);
  private:
  int64_t _internal_senttime() const;
  void _internal_set_senttime(int64_t value);
  public:

  // int32 uavID = 1;
  void clear_uavid();
  int32_t uavid() const;
  void set_uavid(int32_t value);
  private:
  int32_t _internal_uavid() const;
  void _internal_set_uavid(int32_t value);
  public:

  // .ns3.ControlMessage.CommandType command = 4;
  void clear_command();
  ::ns3::ControlMessage_CommandType command() const;
  void set_command(::ns3::ControlMessage_CommandType value);
  private:
  ::ns3::ControlMessage_CommandType _internal_command() const;
  void _internal_set_command(::ns3::ControlMessage_CommandType value);
  public:

  // int64 receiveTime = 3;
  void clear_receivetime();
  int64_t receivetime() const;
  void set_receivetime(int64_t value);
  private:
  int64_t _internal_receivetime() const;
  void _internal_set_receivetime(int64_t value);
  public:

  // double latitude = 6;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 7;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // float altitude = 5;
  void clear_altitude();
  float altitude() const;
  void set_altitude(float value);
  private:
  float _internal_altitude() const;
  void _internal_set_altitude(float value);
  public:

  // float yaw = 9;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // float speed = 10;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:ns3.ControlMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3::ControlMessage_MissionItem > missionitems_;
  int64_t senttime_;
  int32_t uavid_;
  int command_;
  int64_t receivetime_;
  double latitude_;
  double longitude_;
  float altitude_;
  float yaw_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2fcontrol_2dmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlMessage_MissionItem

// uint32 seq = 1;
inline void ControlMessage_MissionItem::clear_seq() {
  seq_ = 0u;
}
inline uint32_t ControlMessage_MissionItem::_internal_seq() const {
  return seq_;
}
inline uint32_t ControlMessage_MissionItem::seq() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.seq)
  return _internal_seq();
}
inline void ControlMessage_MissionItem::_internal_set_seq(uint32_t value) {
  
  seq_ = value;
}
inline void ControlMessage_MissionItem::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.seq)
}

// uint32 frame = 2;
inline void ControlMessage_MissionItem::clear_frame() {
  frame_ = 0u;
}
inline uint32_t ControlMessage_MissionItem::_internal_frame() const {
  return frame_;
}
inline uint32_t ControlMessage_MissionItem::frame() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.frame)
  return _internal_frame();
}
inline void ControlMessage_MissionItem::_internal_set_frame(uint32_t value) {
  
  frame_ = value;
}
inline void ControlMessage_MissionItem::set_frame(uint32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.frame)
}

// uint32 command = 3;
inline void ControlMessage_MissionItem::clear_command() {
  command_ = 0u;
}
inline uint32_t ControlMessage_MissionItem::_internal_command() const {
  return command_;
}
inline uint32_t ControlMessage_MissionItem::command() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.command)
  return _internal_command();
}
inline void ControlMessage_MissionItem::_internal_set_command(uint32_t value) {
  
  command_ = value;
}
inline void ControlMessage_MissionItem::set_command(uint32_t value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.command)
}

// uint32 current = 4;
inline void ControlMessage_MissionItem::clear_current() {
  current_ = 0u;
}
inline uint32_t ControlMessage_MissionItem::_internal_current() const {
  return current_;
}
inline uint32_t ControlMessage_MissionItem::current() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.current)
  return _internal_current();
}
inline void ControlMessage_MissionItem::_internal_set_current(uint32_t value) {
  
  current_ = value;
}
inline void ControlMessage_MissionItem::set_current(uint32_t value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.current)
}

// uint32 autocontinue = 5;
inline void ControlMessage_MissionItem::clear_autocontinue() {
  autocontinue_ = 0u;
}
inline uint32_t ControlMessage_MissionItem::_internal_autocontinue() const {
  return autocontinue_;
}
inline uint32_t ControlMessage_MissionItem::autocontinue() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.autocontinue)
  return _internal_autocontinue();
}
inline void ControlMessage_MissionItem::_internal_set_autocontinue(uint32_t value) {
  
  autocontinue_ = value;
}
inline void ControlMessage_MissionItem::set_autocontinue(uint32_t value) {
  _internal_set_autocontinue(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.autocontinue)
}

// float param1 = 6;
inline void ControlMessage_MissionItem::clear_param1() {
  param1_ = 0;
}
inline float ControlMessage_MissionItem::_internal_param1() const {
  return param1_;
}
inline float ControlMessage_MissionItem::param1() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.param1)
  return _internal_param1();
}
inline void ControlMessage_MissionItem::_internal_set_param1(float value) {
  
  param1_ = value;
}
inline void ControlMessage_MissionItem::set_param1(float value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.param1)
}

// float param2 = 7;
inline void ControlMessage_MissionItem::clear_param2() {
  param2_ = 0;
}
inline float ControlMessage_MissionItem::_internal_param2() const {
  return param2_;
}
inline float ControlMessage_MissionItem::param2() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.param2)
  return _internal_param2();
}
inline void ControlMessage_MissionItem::_internal_set_param2(float value) {
  
  param2_ = value;
}
inline void ControlMessage_MissionItem::set_param2(float value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.param2)
}

// float param3 = 8;
inline void ControlMessage_MissionItem::clear_param3() {
  param3_ = 0;
}
inline float ControlMessage_MissionItem::_internal_param3() const {
  return param3_;
}
inline float ControlMessage_MissionItem::param3() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.param3)
  return _internal_param3();
}
inline void ControlMessage_MissionItem::_internal_set_param3(float value) {
  
  param3_ = value;
}
inline void ControlMessage_MissionItem::set_param3(float value) {
  _internal_set_param3(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.param3)
}

// float param4 = 9;
inline void ControlMessage_MissionItem::clear_param4() {
  param4_ = 0;
}
inline float ControlMessage_MissionItem::_internal_param4() const {
  return param4_;
}
inline float ControlMessage_MissionItem::param4() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.param4)
  return _internal_param4();
}
inline void ControlMessage_MissionItem::_internal_set_param4(float value) {
  
  param4_ = value;
}
inline void ControlMessage_MissionItem::set_param4(float value) {
  _internal_set_param4(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.param4)
}

// int32 x = 10;
inline void ControlMessage_MissionItem::clear_x() {
  x_ = 0;
}
inline int32_t ControlMessage_MissionItem::_internal_x() const {
  return x_;
}
inline int32_t ControlMessage_MissionItem::x() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.x)
  return _internal_x();
}
inline void ControlMessage_MissionItem::_internal_set_x(int32_t value) {
  
  x_ = value;
}
inline void ControlMessage_MissionItem::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.x)
}

// int32 y = 11;
inline void ControlMessage_MissionItem::clear_y() {
  y_ = 0;
}
inline int32_t ControlMessage_MissionItem::_internal_y() const {
  return y_;
}
inline int32_t ControlMessage_MissionItem::y() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.y)
  return _internal_y();
}
inline void ControlMessage_MissionItem::_internal_set_y(int32_t value) {
  
  y_ = value;
}
inline void ControlMessage_MissionItem::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.y)
}

// float z = 12;
inline void ControlMessage_MissionItem::clear_z() {
  z_ = 0;
}
inline float ControlMessage_MissionItem::_internal_z() const {
  return z_;
}
inline float ControlMessage_MissionItem::z() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.z)
  return _internal_z();
}
inline void ControlMessage_MissionItem::_internal_set_z(float value) {
  
  z_ = value;
}
inline void ControlMessage_MissionItem::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.z)
}

// uint32 mission_type = 13;
inline void ControlMessage_MissionItem::clear_mission_type() {
  mission_type_ = 0u;
}
inline uint32_t ControlMessage_MissionItem::_internal_mission_type() const {
  return mission_type_;
}
inline uint32_t ControlMessage_MissionItem::mission_type() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.MissionItem.mission_type)
  return _internal_mission_type();
}
inline void ControlMessage_MissionItem::_internal_set_mission_type(uint32_t value) {
  
  mission_type_ = value;
}
inline void ControlMessage_MissionItem::set_mission_type(uint32_t value) {
  _internal_set_mission_type(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.MissionItem.mission_type)
}

// -------------------------------------------------------------------

// ControlMessage

// int32 uavID = 1;
inline void ControlMessage::clear_uavid() {
  uavid_ = 0;
}
inline int32_t ControlMessage::_internal_uavid() const {
  return uavid_;
}
inline int32_t ControlMessage::uavid() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.uavID)
  return _internal_uavid();
}
inline void ControlMessage::_internal_set_uavid(int32_t value) {
  
  uavid_ = value;
}
inline void ControlMessage::set_uavid(int32_t value) {
  _internal_set_uavid(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.uavID)
}

// int64 sentTime = 2;
inline void ControlMessage::clear_senttime() {
  senttime_ = int64_t{0};
}
inline int64_t ControlMessage::_internal_senttime() const {
  return senttime_;
}
inline int64_t ControlMessage::senttime() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.sentTime)
  return _internal_senttime();
}
inline void ControlMessage::_internal_set_senttime(int64_t value) {
  
  senttime_ = value;
}
inline void ControlMessage::set_senttime(int64_t value) {
  _internal_set_senttime(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.sentTime)
}

// int64 receiveTime = 3;
inline void ControlMessage::clear_receivetime() {
  receivetime_ = int64_t{0};
}
inline int64_t ControlMessage::_internal_receivetime() const {
  return receivetime_;
}
inline int64_t ControlMessage::receivetime() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.receiveTime)
  return _internal_receivetime();
}
inline void ControlMessage::_internal_set_receivetime(int64_t value) {
  
  receivetime_ = value;
}
inline void ControlMessage::set_receivetime(int64_t value) {
  _internal_set_receivetime(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.receiveTime)
}

// .ns3.ControlMessage.CommandType command = 4;
inline void ControlMessage::clear_command() {
  command_ = 0;
}
inline ::ns3::ControlMessage_CommandType ControlMessage::_internal_command() const {
  return static_cast< ::ns3::ControlMessage_CommandType >(command_);
}
inline ::ns3::ControlMessage_CommandType ControlMessage::command() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.command)
  return _internal_command();
}
inline void ControlMessage::_internal_set_command(::ns3::ControlMessage_CommandType value) {
  
  command_ = value;
}
inline void ControlMessage::set_command(::ns3::ControlMessage_CommandType value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.command)
}

// float altitude = 5;
inline void ControlMessage::clear_altitude() {
  altitude_ = 0;
}
inline float ControlMessage::_internal_altitude() const {
  return altitude_;
}
inline float ControlMessage::altitude() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.altitude)
  return _internal_altitude();
}
inline void ControlMessage::_internal_set_altitude(float value) {
  
  altitude_ = value;
}
inline void ControlMessage::set_altitude(float value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.altitude)
}

// double latitude = 6;
inline void ControlMessage::clear_latitude() {
  latitude_ = 0;
}
inline double ControlMessage::_internal_latitude() const {
  return latitude_;
}
inline double ControlMessage::latitude() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.latitude)
  return _internal_latitude();
}
inline void ControlMessage::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void ControlMessage::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.latitude)
}

// double longitude = 7;
inline void ControlMessage::clear_longitude() {
  longitude_ = 0;
}
inline double ControlMessage::_internal_longitude() const {
  return longitude_;
}
inline double ControlMessage::longitude() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.longitude)
  return _internal_longitude();
}
inline void ControlMessage::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void ControlMessage::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.longitude)
}

// float yaw = 9;
inline void ControlMessage::clear_yaw() {
  yaw_ = 0;
}
inline float ControlMessage::_internal_yaw() const {
  return yaw_;
}
inline float ControlMessage::yaw() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.yaw)
  return _internal_yaw();
}
inline void ControlMessage::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void ControlMessage::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.yaw)
}

// float speed = 10;
inline void ControlMessage::clear_speed() {
  speed_ = 0;
}
inline float ControlMessage::_internal_speed() const {
  return speed_;
}
inline float ControlMessage::speed() const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.speed)
  return _internal_speed();
}
inline void ControlMessage::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void ControlMessage::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:ns3.ControlMessage.speed)
}

// repeated .ns3.ControlMessage.MissionItem missionItems = 11;
inline int ControlMessage::_internal_missionitems_size() const {
  return missionitems_.size();
}
inline int ControlMessage::missionitems_size() const {
  return _internal_missionitems_size();
}
inline void ControlMessage::clear_missionitems() {
  missionitems_.Clear();
}
inline ::ns3::ControlMessage_MissionItem* ControlMessage::mutable_missionitems(int index) {
  // @@protoc_insertion_point(field_mutable:ns3.ControlMessage.missionItems)
  return missionitems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3::ControlMessage_MissionItem >*
ControlMessage::mutable_missionitems() {
  // @@protoc_insertion_point(field_mutable_list:ns3.ControlMessage.missionItems)
  return &missionitems_;
}
inline const ::ns3::ControlMessage_MissionItem& ControlMessage::_internal_missionitems(int index) const {
  return missionitems_.Get(index);
}
inline const ::ns3::ControlMessage_MissionItem& ControlMessage::missionitems(int index) const {
  // @@protoc_insertion_point(field_get:ns3.ControlMessage.missionItems)
  return _internal_missionitems(index);
}
inline ::ns3::ControlMessage_MissionItem* ControlMessage::_internal_add_missionitems() {
  return missionitems_.Add();
}
inline ::ns3::ControlMessage_MissionItem* ControlMessage::add_missionitems() {
  ::ns3::ControlMessage_MissionItem* _add = _internal_add_missionitems();
  // @@protoc_insertion_point(field_add:ns3.ControlMessage.missionItems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ns3::ControlMessage_MissionItem >&
ControlMessage::missionitems() const {
  // @@protoc_insertion_point(field_list:ns3.ControlMessage.missionItems)
  return missionitems_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ns3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ns3::ControlMessage_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ns3::ControlMessage_CommandType>() {
  return ::ns3::ControlMessage_CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2fcontrol_2dmessage_2eproto
