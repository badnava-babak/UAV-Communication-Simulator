// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/control-message.proto

#include "control-message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ns3 {
constexpr ControlMessage_MissionItem::ControlMessage_MissionItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seq_(0u)
  , frame_(0u)
  , command_(0u)
  , current_(0u)
  , autocontinue_(0u)
  , param1_(0)
  , param2_(0)
  , param3_(0)
  , param4_(0)
  , x_(0)
  , y_(0)
  , z_(0)
  , mission_type_(0u){}
struct ControlMessage_MissionItemDefaultTypeInternal {
  constexpr ControlMessage_MissionItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlMessage_MissionItemDefaultTypeInternal() {}
  union {
    ControlMessage_MissionItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlMessage_MissionItemDefaultTypeInternal _ControlMessage_MissionItem_default_instance_;
constexpr ControlMessage::ControlMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : missionitems_()
  , senttime_(int64_t{0})
  , uavid_(0)
  , command_(0)

  , receivetime_(int64_t{0})
  , latitude_(0)
  , longitude_(0)
  , altitude_(0)
  , yaw_(0)
  , speed_(0){}
struct ControlMessageDefaultTypeInternal {
  constexpr ControlMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlMessageDefaultTypeInternal() {}
  union {
    ControlMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
}  // namespace ns3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2fcontrol_2dmessage_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2fcontrol_2dmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2fcontrol_2dmessage_2eproto = nullptr;

const uint32_t TableStruct_msg_2fcontrol_2dmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, seq_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, frame_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, command_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, current_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, autocontinue_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, param1_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, param2_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, param3_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, param4_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, x_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, y_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, z_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage_MissionItem, mission_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, uavid_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, senttime_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, receivetime_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, command_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, altitude_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, latitude_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, longitude_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, yaw_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, speed_),
  PROTOBUF_FIELD_OFFSET(::ns3::ControlMessage, missionitems_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ns3::ControlMessage_MissionItem)},
  { 19, -1, -1, sizeof(::ns3::ControlMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_ControlMessage_MissionItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_ControlMessage_default_instance_),
};

const char descriptor_table_protodef_msg_2fcontrol_2dmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031msg/control-message.proto\022\003ns3\"\357\004\n\016Con"
  "trolMessage\022\r\n\005uavID\030\001 \001(\005\022\020\n\010sentTime\030\002"
  " \001(\003\022\023\n\013receiveTime\030\003 \001(\003\0220\n\007command\030\004 \001"
  "(\0162\037.ns3.ControlMessage.CommandType\022\020\n\010a"
  "ltitude\030\005 \001(\002\022\020\n\010latitude\030\006 \001(\001\022\021\n\tlongi"
  "tude\030\007 \001(\001\022\013\n\003yaw\030\t \001(\002\022\r\n\005speed\030\n \001(\002\0225"
  "\n\014missionItems\030\013 \003(\0132\037.ns3.ControlMessag"
  "e.MissionItem\032\330\001\n\013MissionItem\022\013\n\003seq\030\001 \001"
  "(\r\022\r\n\005frame\030\002 \001(\r\022\017\n\007command\030\003 \001(\r\022\017\n\007cu"
  "rrent\030\004 \001(\r\022\024\n\014autocontinue\030\005 \001(\r\022\016\n\006par"
  "am1\030\006 \001(\002\022\016\n\006param2\030\007 \001(\002\022\016\n\006param3\030\010 \001("
  "\002\022\016\n\006param4\030\t \001(\002\022\t\n\001x\030\n \001(\005\022\t\n\001y\030\013 \001(\005\022"
  "\t\n\001z\030\014 \001(\002\022\024\n\014mission_type\030\r \001(\r\"\217\001\n\013Com"
  "mandType\022\023\n\017ARM_AND_TAKEOFF\020\000\022\010\n\004LAND\020\001\022"
  "\t\n\005GO_TO\020\002\022\024\n\020RETURN_TO_LAUNCH\020\003\022\021\n\rSET_"
  "MAX_SPEED\020\004\022\022\n\016UPLOAD_MISSION\020\005\022\031\n\025ARM_A"
  "ND_START_MISSION\020\006b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2fcontrol_2dmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2fcontrol_2dmessage_2eproto = {
  false, false, 666, descriptor_table_protodef_msg_2fcontrol_2dmessage_2eproto, "msg/control-message.proto", 
  &descriptor_table_msg_2fcontrol_2dmessage_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_msg_2fcontrol_2dmessage_2eproto::offsets,
  file_level_metadata_msg_2fcontrol_2dmessage_2eproto, file_level_enum_descriptors_msg_2fcontrol_2dmessage_2eproto, file_level_service_descriptors_msg_2fcontrol_2dmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msg_2fcontrol_2dmessage_2eproto_getter() {
  return &descriptor_table_msg_2fcontrol_2dmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_2fcontrol_2dmessage_2eproto(&descriptor_table_msg_2fcontrol_2dmessage_2eproto);
namespace ns3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMessage_CommandType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2fcontrol_2dmessage_2eproto);
  return file_level_enum_descriptors_msg_2fcontrol_2dmessage_2eproto[0];
}
bool ControlMessage_CommandType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ControlMessage_CommandType ControlMessage::ARM_AND_TAKEOFF;
constexpr ControlMessage_CommandType ControlMessage::LAND;
constexpr ControlMessage_CommandType ControlMessage::GO_TO;
constexpr ControlMessage_CommandType ControlMessage::RETURN_TO_LAUNCH;
constexpr ControlMessage_CommandType ControlMessage::SET_MAX_SPEED;
constexpr ControlMessage_CommandType ControlMessage::UPLOAD_MISSION;
constexpr ControlMessage_CommandType ControlMessage::ARM_AND_START_MISSION;
constexpr ControlMessage_CommandType ControlMessage::CommandType_MIN;
constexpr ControlMessage_CommandType ControlMessage::CommandType_MAX;
constexpr int ControlMessage::CommandType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ControlMessage_MissionItem::_Internal {
 public:
};

ControlMessage_MissionItem::ControlMessage_MissionItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3.ControlMessage.MissionItem)
}
ControlMessage_MissionItem::ControlMessage_MissionItem(const ControlMessage_MissionItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_type_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(mission_type_));
  // @@protoc_insertion_point(copy_constructor:ns3.ControlMessage.MissionItem)
}

inline void ControlMessage_MissionItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mission_type_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(mission_type_));
}

ControlMessage_MissionItem::~ControlMessage_MissionItem() {
  // @@protoc_insertion_point(destructor:ns3.ControlMessage.MissionItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlMessage_MissionItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlMessage_MissionItem::ArenaDtor(void* object) {
  ControlMessage_MissionItem* _this = reinterpret_cast< ControlMessage_MissionItem* >(object);
  (void)_this;
}
void ControlMessage_MissionItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlMessage_MissionItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlMessage_MissionItem::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.ControlMessage.MissionItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_type_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(mission_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMessage_MissionItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          command_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 current = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 autocontinue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          autocontinue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float param1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          param1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float param2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          param2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float param3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          param3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float param4 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          param4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float z = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 mission_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          mission_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMessage_MissionItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.ControlMessage.MissionItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // uint32 frame = 2;
  if (this->_internal_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame(), target);
  }

  // uint32 command = 3;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_command(), target);
  }

  // uint32 current = 4;
  if (this->_internal_current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_current(), target);
  }

  // uint32 autocontinue = 5;
  if (this->_internal_autocontinue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_autocontinue(), target);
  }

  // float param1 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param1 = this->_internal_param1();
  uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_param1(), target);
  }

  // float param2 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param2 = this->_internal_param2();
  uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_param2(), target);
  }

  // float param3 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param3 = this->_internal_param3();
  uint32_t raw_param3;
  memcpy(&raw_param3, &tmp_param3, sizeof(tmp_param3));
  if (raw_param3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_param3(), target);
  }

  // float param4 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param4 = this->_internal_param4();
  uint32_t raw_param4;
  memcpy(&raw_param4, &tmp_param4, sizeof(tmp_param4));
  if (raw_param4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_param4(), target);
  }

  // int32 x = 10;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_x(), target);
  }

  // int32 y = 11;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_y(), target);
  }

  // float z = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_z(), target);
  }

  // uint32 mission_type = 13;
  if (this->_internal_mission_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_mission_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.ControlMessage.MissionItem)
  return target;
}

size_t ControlMessage_MissionItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.ControlMessage.MissionItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seq());
  }

  // uint32 frame = 2;
  if (this->_internal_frame() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frame());
  }

  // uint32 command = 3;
  if (this->_internal_command() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_command());
  }

  // uint32 current = 4;
  if (this->_internal_current() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current());
  }

  // uint32 autocontinue = 5;
  if (this->_internal_autocontinue() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_autocontinue());
  }

  // float param1 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param1 = this->_internal_param1();
  uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    total_size += 1 + 4;
  }

  // float param2 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param2 = this->_internal_param2();
  uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    total_size += 1 + 4;
  }

  // float param3 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param3 = this->_internal_param3();
  uint32_t raw_param3;
  memcpy(&raw_param3, &tmp_param3, sizeof(tmp_param3));
  if (raw_param3 != 0) {
    total_size += 1 + 4;
  }

  // float param4 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param4 = this->_internal_param4();
  uint32_t raw_param4;
  memcpy(&raw_param4, &tmp_param4, sizeof(tmp_param4));
  if (raw_param4 != 0) {
    total_size += 1 + 4;
  }

  // int32 x = 10;
  if (this->_internal_x() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 11;
  if (this->_internal_y() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // float z = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // uint32 mission_type = 13;
  if (this->_internal_mission_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mission_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMessage_MissionItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlMessage_MissionItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMessage_MissionItem::GetClassData() const { return &_class_data_; }

void ControlMessage_MissionItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlMessage_MissionItem *>(to)->MergeFrom(
      static_cast<const ControlMessage_MissionItem &>(from));
}


void ControlMessage_MissionItem::MergeFrom(const ControlMessage_MissionItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.ControlMessage.MissionItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_frame() != 0) {
    _internal_set_frame(from._internal_frame());
  }
  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  if (from._internal_current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from._internal_autocontinue() != 0) {
    _internal_set_autocontinue(from._internal_autocontinue());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param1 = from._internal_param1();
  uint32_t raw_param1;
  memcpy(&raw_param1, &tmp_param1, sizeof(tmp_param1));
  if (raw_param1 != 0) {
    _internal_set_param1(from._internal_param1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param2 = from._internal_param2();
  uint32_t raw_param2;
  memcpy(&raw_param2, &tmp_param2, sizeof(tmp_param2));
  if (raw_param2 != 0) {
    _internal_set_param2(from._internal_param2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param3 = from._internal_param3();
  uint32_t raw_param3;
  memcpy(&raw_param3, &tmp_param3, sizeof(tmp_param3));
  if (raw_param3 != 0) {
    _internal_set_param3(from._internal_param3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_param4 = from._internal_param4();
  uint32_t raw_param4;
  memcpy(&raw_param4, &tmp_param4, sizeof(tmp_param4));
  if (raw_param4 != 0) {
    _internal_set_param4(from._internal_param4());
  }
  if (from._internal_x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  if (from._internal_mission_type() != 0) {
    _internal_set_mission_type(from._internal_mission_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMessage_MissionItem::CopyFrom(const ControlMessage_MissionItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.ControlMessage.MissionItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage_MissionItem::IsInitialized() const {
  return true;
}

void ControlMessage_MissionItem::InternalSwap(ControlMessage_MissionItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlMessage_MissionItem, mission_type_)
      + sizeof(ControlMessage_MissionItem::mission_type_)
      - PROTOBUF_FIELD_OFFSET(ControlMessage_MissionItem, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMessage_MissionItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2fcontrol_2dmessage_2eproto_getter, &descriptor_table_msg_2fcontrol_2dmessage_2eproto_once,
      file_level_metadata_msg_2fcontrol_2dmessage_2eproto[0]);
}

// ===================================================================

class ControlMessage::_Internal {
 public:
};

ControlMessage::ControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  missionitems_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3.ControlMessage)
}
ControlMessage::ControlMessage(const ControlMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      missionitems_(from.missionitems_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&senttime_, &from.senttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&senttime_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:ns3.ControlMessage)
}

inline void ControlMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&senttime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&senttime_)) + sizeof(speed_));
}

ControlMessage::~ControlMessage() {
  // @@protoc_insertion_point(destructor:ns3.ControlMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlMessage::ArenaDtor(void* object) {
  ControlMessage* _this = reinterpret_cast< ControlMessage* >(object);
  (void)_this;
}
void ControlMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.ControlMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missionitems_.Clear();
  ::memset(&senttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&senttime_)) + sizeof(speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uavID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uavid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sentTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          senttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 receiveTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          receivetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3.ControlMessage.CommandType command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::ns3::ControlMessage_CommandType>(val));
        } else
          goto handle_unusual;
        continue;
      // float altitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .ns3.ControlMessage.MissionItem missionItems = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_missionitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.ControlMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uavID = 1;
  if (this->_internal_uavid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uavid(), target);
  }

  // int64 sentTime = 2;
  if (this->_internal_senttime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_senttime(), target);
  }

  // int64 receiveTime = 3;
  if (this->_internal_receivetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_receivetime(), target);
  }

  // .ns3.ControlMessage.CommandType command = 4;
  if (this->_internal_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_command(), target);
  }

  // float altitude = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_altitude(), target);
  }

  // double latitude = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_latitude(), target);
  }

  // double longitude = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_longitude(), target);
  }

  // float yaw = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_yaw(), target);
  }

  // float speed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_speed(), target);
  }

  // repeated .ns3.ControlMessage.MissionItem missionItems = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missionitems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_missionitems(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.ControlMessage)
  return target;
}

size_t ControlMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.ControlMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ns3.ControlMessage.MissionItem missionItems = 11;
  total_size += 1UL * this->_internal_missionitems_size();
  for (const auto& msg : this->missionitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 sentTime = 2;
  if (this->_internal_senttime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_senttime());
  }

  // int32 uavID = 1;
  if (this->_internal_uavid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uavid());
  }

  // .ns3.ControlMessage.CommandType command = 4;
  if (this->_internal_command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  // int64 receiveTime = 3;
  if (this->_internal_receivetime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_receivetime());
  }

  // double latitude = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // float altitude = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = this->_internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float speed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlMessage::GetClassData() const { return &_class_data_; }

void ControlMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlMessage *>(to)->MergeFrom(
      static_cast<const ControlMessage &>(from));
}


void ControlMessage::MergeFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.ControlMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  missionitems_.MergeFrom(from.missionitems_);
  if (from._internal_senttime() != 0) {
    _internal_set_senttime(from._internal_senttime());
  }
  if (from._internal_uavid() != 0) {
    _internal_set_uavid(from._internal_uavid());
  }
  if (from._internal_command() != 0) {
    _internal_set_command(from._internal_command());
  }
  if (from._internal_receivetime() != 0) {
    _internal_set_receivetime(from._internal_receivetime());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_altitude = from._internal_altitude();
  uint32_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _internal_set_altitude(from._internal_altitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.ControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {
  return true;
}

void ControlMessage::InternalSwap(ControlMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  missionitems_.InternalSwap(&other->missionitems_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlMessage, speed_)
      + sizeof(ControlMessage::speed_)
      - PROTOBUF_FIELD_OFFSET(ControlMessage, senttime_)>(
          reinterpret_cast<char*>(&senttime_),
          reinterpret_cast<char*>(&other->senttime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2fcontrol_2dmessage_2eproto_getter, &descriptor_table_msg_2fcontrol_2dmessage_2eproto_once,
      file_level_metadata_msg_2fcontrol_2dmessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ns3::ControlMessage_MissionItem* Arena::CreateMaybeMessage< ::ns3::ControlMessage_MissionItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::ControlMessage_MissionItem >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3::ControlMessage* Arena::CreateMaybeMessage< ::ns3::ControlMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::ControlMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
