// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg/telemetry-message.proto

#include "telemetry-message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace ns3 {
constexpr TelemetryMessage_BatteryInfo::TelemetryMessage_BatteryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , voltage_v_(0)
  , remaining_percent_(0){}
struct TelemetryMessage_BatteryInfoDefaultTypeInternal {
  constexpr TelemetryMessage_BatteryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryMessage_BatteryInfoDefaultTypeInternal() {}
  union {
    TelemetryMessage_BatteryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryMessage_BatteryInfoDefaultTypeInternal _TelemetryMessage_BatteryInfo_default_instance_;
constexpr TelemetryMessage_PositionInfo::TelemetryMessage_PositionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_deg_(0)
  , longitude_deg_(0)
  , absolute_altitude_m_(0)
  , relative_altitude_m_(0){}
struct TelemetryMessage_PositionInfoDefaultTypeInternal {
  constexpr TelemetryMessage_PositionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryMessage_PositionInfoDefaultTypeInternal() {}
  union {
    TelemetryMessage_PositionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryMessage_PositionInfoDefaultTypeInternal _TelemetryMessage_PositionInfo_default_instance_;
constexpr TelemetryMessage_PositionVelocityNed_PositionNed::TelemetryMessage_PositionVelocityNed_PositionNed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : north_m_(0)
  , east_m_(0)
  , down_m_(0){}
struct TelemetryMessage_PositionVelocityNed_PositionNedDefaultTypeInternal {
  constexpr TelemetryMessage_PositionVelocityNed_PositionNedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryMessage_PositionVelocityNed_PositionNedDefaultTypeInternal() {}
  union {
    TelemetryMessage_PositionVelocityNed_PositionNed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryMessage_PositionVelocityNed_PositionNedDefaultTypeInternal _TelemetryMessage_PositionVelocityNed_PositionNed_default_instance_;
constexpr TelemetryMessage_PositionVelocityNed_VelocityNed::TelemetryMessage_PositionVelocityNed_VelocityNed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : north_m_s_(0)
  , east_m_s_(0)
  , down_m_s_(0){}
struct TelemetryMessage_PositionVelocityNed_VelocityNedDefaultTypeInternal {
  constexpr TelemetryMessage_PositionVelocityNed_VelocityNedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryMessage_PositionVelocityNed_VelocityNedDefaultTypeInternal() {}
  union {
    TelemetryMessage_PositionVelocityNed_VelocityNed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryMessage_PositionVelocityNed_VelocityNedDefaultTypeInternal _TelemetryMessage_PositionVelocityNed_VelocityNed_default_instance_;
constexpr TelemetryMessage_PositionVelocityNed::TelemetryMessage_PositionVelocityNed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , velocity_(nullptr){}
struct TelemetryMessage_PositionVelocityNedDefaultTypeInternal {
  constexpr TelemetryMessage_PositionVelocityNedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryMessage_PositionVelocityNedDefaultTypeInternal() {}
  union {
    TelemetryMessage_PositionVelocityNed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryMessage_PositionVelocityNedDefaultTypeInternal _TelemetryMessage_PositionVelocityNed_default_instance_;
constexpr TelemetryMessage::TelemetryMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_updated_(nullptr)
  , battery_(nullptr)
  , position_(nullptr)
  , positionvelocityned_(nullptr)
  , uavarrivaltime_(int64_t{0})
  , uavid_(0)
  , update_(0)

  , gcsarrivaltime_(int64_t{0}){}
struct TelemetryMessageDefaultTypeInternal {
  constexpr TelemetryMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryMessageDefaultTypeInternal() {}
  union {
    TelemetryMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryMessageDefaultTypeInternal _TelemetryMessage_default_instance_;
}  // namespace ns3
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2ftelemetry_2dmessage_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2ftelemetry_2dmessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2ftelemetry_2dmessage_2eproto = nullptr;

const uint32_t TableStruct_msg_2ftelemetry_2dmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_BatteryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_BatteryInfo, id_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_BatteryInfo, voltage_v_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_BatteryInfo, remaining_percent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionInfo, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionInfo, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionInfo, absolute_altitude_m_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionInfo, relative_altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed_PositionNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed_PositionNed, north_m_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed_PositionNed, east_m_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed_PositionNed, down_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed, north_m_s_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed, east_m_s_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed, down_m_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed, position_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage_PositionVelocityNed, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage, uavid_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage, uavarrivaltime_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage, gcsarrivaltime_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage, update_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage, last_updated_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage, battery_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage, position_),
  PROTOBUF_FIELD_OFFSET(::ns3::TelemetryMessage, positionvelocityned_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ns3::TelemetryMessage_BatteryInfo)},
  { 9, -1, -1, sizeof(::ns3::TelemetryMessage_PositionInfo)},
  { 19, -1, -1, sizeof(::ns3::TelemetryMessage_PositionVelocityNed_PositionNed)},
  { 28, -1, -1, sizeof(::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed)},
  { 37, -1, -1, sizeof(::ns3::TelemetryMessage_PositionVelocityNed)},
  { 45, -1, -1, sizeof(::ns3::TelemetryMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_TelemetryMessage_BatteryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_TelemetryMessage_PositionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_TelemetryMessage_PositionVelocityNed_PositionNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_TelemetryMessage_PositionVelocityNed_VelocityNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_TelemetryMessage_PositionVelocityNed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ns3::_TelemetryMessage_default_instance_),
};

const char descriptor_table_protodef_msg_2ftelemetry_2dmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033msg/telemetry-message.proto\022\003ns3\032\037goog"
  "le/protobuf/timestamp.proto\"\253\007\n\020Telemetr"
  "yMessage\022\r\n\005uavID\030\001 \001(\005\022\026\n\016uavArrivalTim"
  "e\030\002 \001(\003\022\026\n\016gcsArrivalTime\030\003 \001(\003\0220\n\006updat"
  "e\030\004 \001(\0162 .ns3.TelemetryMessage.UpdateTyp"
  "e\0220\n\014last_updated\030\005 \001(\0132\032.google.protobu"
  "f.Timestamp\0222\n\007battery\030\006 \001(\0132!.ns3.Telem"
  "etryMessage.BatteryInfo\0224\n\010position\030\007 \001("
  "\0132\".ns3.TelemetryMessage.PositionInfo\022F\n"
  "\023positionVelocityNed\030\010 \001(\0132).ns3.Telemet"
  "ryMessage.PositionVelocityNed\032G\n\013Battery"
  "Info\022\n\n\002id\030\001 \001(\r\022\021\n\tvoltage_v\030\002 \001(\002\022\031\n\021r"
  "emaining_percent\030\003 \001(\002\032u\n\014PositionInfo\022\024"
  "\n\014latitude_deg\030\001 \001(\001\022\025\n\rlongitude_deg\030\002 "
  "\001(\001\022\033\n\023absolute_altitude_m\030\003 \001(\002\022\033\n\023rela"
  "tive_altitude_m\030\004 \001(\002\032\255\002\n\023PositionVeloci"
  "tyNed\022G\n\010position\030\001 \001(\01325.ns3.TelemetryM"
  "essage.PositionVelocityNed.PositionNed\022G"
  "\n\010velocity\030\002 \001(\01325.ns3.TelemetryMessage."
  "PositionVelocityNed.VelocityNed\032>\n\013Posit"
  "ionNed\022\017\n\007north_m\030\001 \001(\002\022\016\n\006east_m\030\002 \001(\002\022"
  "\016\n\006down_m\030\003 \001(\002\032D\n\013VelocityNed\022\021\n\tnorth_"
  "m_s\030\001 \001(\002\022\020\n\010east_m_s\030\002 \001(\002\022\020\n\010down_m_s\030"
  "\003 \001(\002\"R\n\nUpdateType\022\021\n\rBatteryUpdate\020\000\022\022"
  "\n\016PositionUpdate\020\001\022\035\n\031PositionVelocityNe"
  "dUpdate\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_msg_2ftelemetry_2dmessage_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2ftelemetry_2dmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2ftelemetry_2dmessage_2eproto = {
  false, false, 1017, descriptor_table_protodef_msg_2ftelemetry_2dmessage_2eproto, "msg/telemetry-message.proto", 
  &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_once, descriptor_table_msg_2ftelemetry_2dmessage_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_msg_2ftelemetry_2dmessage_2eproto::offsets,
  file_level_metadata_msg_2ftelemetry_2dmessage_2eproto, file_level_enum_descriptors_msg_2ftelemetry_2dmessage_2eproto, file_level_service_descriptors_msg_2ftelemetry_2dmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msg_2ftelemetry_2dmessage_2eproto_getter() {
  return &descriptor_table_msg_2ftelemetry_2dmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_2ftelemetry_2dmessage_2eproto(&descriptor_table_msg_2ftelemetry_2dmessage_2eproto);
namespace ns3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TelemetryMessage_UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2ftelemetry_2dmessage_2eproto);
  return file_level_enum_descriptors_msg_2ftelemetry_2dmessage_2eproto[0];
}
bool TelemetryMessage_UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TelemetryMessage_UpdateType TelemetryMessage::BatteryUpdate;
constexpr TelemetryMessage_UpdateType TelemetryMessage::PositionUpdate;
constexpr TelemetryMessage_UpdateType TelemetryMessage::PositionVelocityNedUpdate;
constexpr TelemetryMessage_UpdateType TelemetryMessage::UpdateType_MIN;
constexpr TelemetryMessage_UpdateType TelemetryMessage::UpdateType_MAX;
constexpr int TelemetryMessage::UpdateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TelemetryMessage_BatteryInfo::_Internal {
 public:
};

TelemetryMessage_BatteryInfo::TelemetryMessage_BatteryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3.TelemetryMessage.BatteryInfo)
}
TelemetryMessage_BatteryInfo::TelemetryMessage_BatteryInfo(const TelemetryMessage_BatteryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_percent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(remaining_percent_));
  // @@protoc_insertion_point(copy_constructor:ns3.TelemetryMessage.BatteryInfo)
}

inline void TelemetryMessage_BatteryInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remaining_percent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(remaining_percent_));
}

TelemetryMessage_BatteryInfo::~TelemetryMessage_BatteryInfo() {
  // @@protoc_insertion_point(destructor:ns3.TelemetryMessage.BatteryInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetryMessage_BatteryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TelemetryMessage_BatteryInfo::ArenaDtor(void* object) {
  TelemetryMessage_BatteryInfo* _this = reinterpret_cast< TelemetryMessage_BatteryInfo* >(object);
  (void)_this;
}
void TelemetryMessage_BatteryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryMessage_BatteryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryMessage_BatteryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.TelemetryMessage.BatteryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_percent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(remaining_percent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryMessage_BatteryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float voltage_v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          voltage_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float remaining_percent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          remaining_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryMessage_BatteryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.TelemetryMessage.BatteryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // float voltage_v = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voltage_v = this->_internal_voltage_v();
  uint32_t raw_voltage_v;
  memcpy(&raw_voltage_v, &tmp_voltage_v, sizeof(tmp_voltage_v));
  if (raw_voltage_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_voltage_v(), target);
  }

  // float remaining_percent = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_remaining_percent = this->_internal_remaining_percent();
  uint32_t raw_remaining_percent;
  memcpy(&raw_remaining_percent, &tmp_remaining_percent, sizeof(tmp_remaining_percent));
  if (raw_remaining_percent != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_remaining_percent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.TelemetryMessage.BatteryInfo)
  return target;
}

size_t TelemetryMessage_BatteryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.TelemetryMessage.BatteryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // float voltage_v = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voltage_v = this->_internal_voltage_v();
  uint32_t raw_voltage_v;
  memcpy(&raw_voltage_v, &tmp_voltage_v, sizeof(tmp_voltage_v));
  if (raw_voltage_v != 0) {
    total_size += 1 + 4;
  }

  // float remaining_percent = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_remaining_percent = this->_internal_remaining_percent();
  uint32_t raw_remaining_percent;
  memcpy(&raw_remaining_percent, &tmp_remaining_percent, sizeof(tmp_remaining_percent));
  if (raw_remaining_percent != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryMessage_BatteryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryMessage_BatteryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryMessage_BatteryInfo::GetClassData() const { return &_class_data_; }

void TelemetryMessage_BatteryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryMessage_BatteryInfo *>(to)->MergeFrom(
      static_cast<const TelemetryMessage_BatteryInfo &>(from));
}


void TelemetryMessage_BatteryInfo::MergeFrom(const TelemetryMessage_BatteryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.TelemetryMessage.BatteryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_voltage_v = from._internal_voltage_v();
  uint32_t raw_voltage_v;
  memcpy(&raw_voltage_v, &tmp_voltage_v, sizeof(tmp_voltage_v));
  if (raw_voltage_v != 0) {
    _internal_set_voltage_v(from._internal_voltage_v());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_remaining_percent = from._internal_remaining_percent();
  uint32_t raw_remaining_percent;
  memcpy(&raw_remaining_percent, &tmp_remaining_percent, sizeof(tmp_remaining_percent));
  if (raw_remaining_percent != 0) {
    _internal_set_remaining_percent(from._internal_remaining_percent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryMessage_BatteryInfo::CopyFrom(const TelemetryMessage_BatteryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.TelemetryMessage.BatteryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryMessage_BatteryInfo::IsInitialized() const {
  return true;
}

void TelemetryMessage_BatteryInfo::InternalSwap(TelemetryMessage_BatteryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryMessage_BatteryInfo, remaining_percent_)
      + sizeof(TelemetryMessage_BatteryInfo::remaining_percent_)
      - PROTOBUF_FIELD_OFFSET(TelemetryMessage_BatteryInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryMessage_BatteryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_getter, &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_once,
      file_level_metadata_msg_2ftelemetry_2dmessage_2eproto[0]);
}

// ===================================================================

class TelemetryMessage_PositionInfo::_Internal {
 public:
};

TelemetryMessage_PositionInfo::TelemetryMessage_PositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3.TelemetryMessage.PositionInfo)
}
TelemetryMessage_PositionInfo::TelemetryMessage_PositionInfo(const TelemetryMessage_PositionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  // @@protoc_insertion_point(copy_constructor:ns3.TelemetryMessage.PositionInfo)
}

inline void TelemetryMessage_PositionInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relative_altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
}

TelemetryMessage_PositionInfo::~TelemetryMessage_PositionInfo() {
  // @@protoc_insertion_point(destructor:ns3.TelemetryMessage.PositionInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetryMessage_PositionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TelemetryMessage_PositionInfo::ArenaDtor(void* object) {
  TelemetryMessage_PositionInfo* _this = reinterpret_cast< TelemetryMessage_PositionInfo* >(object);
  (void)_this;
}
void TelemetryMessage_PositionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryMessage_PositionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryMessage_PositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.TelemetryMessage.PositionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(relative_altitude_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryMessage_PositionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float absolute_altitude_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          absolute_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float relative_altitude_m = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          relative_altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryMessage_PositionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.TelemetryMessage.PositionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // float absolute_altitude_m = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_absolute_altitude_m(), target);
  }

  // float relative_altitude_m = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_relative_altitude_m = this->_internal_relative_altitude_m();
  uint32_t raw_relative_altitude_m;
  memcpy(&raw_relative_altitude_m, &tmp_relative_altitude_m, sizeof(tmp_relative_altitude_m));
  if (raw_relative_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_relative_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.TelemetryMessage.PositionInfo)
  return target;
}

size_t TelemetryMessage_PositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.TelemetryMessage.PositionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 1 + 8;
  }

  // float absolute_altitude_m = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = this->_internal_absolute_altitude_m();
  uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    total_size += 1 + 4;
  }

  // float relative_altitude_m = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_relative_altitude_m = this->_internal_relative_altitude_m();
  uint32_t raw_relative_altitude_m;
  memcpy(&raw_relative_altitude_m, &tmp_relative_altitude_m, sizeof(tmp_relative_altitude_m));
  if (raw_relative_altitude_m != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryMessage_PositionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryMessage_PositionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryMessage_PositionInfo::GetClassData() const { return &_class_data_; }

void TelemetryMessage_PositionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryMessage_PositionInfo *>(to)->MergeFrom(
      static_cast<const TelemetryMessage_PositionInfo &>(from));
}


void TelemetryMessage_PositionInfo::MergeFrom(const TelemetryMessage_PositionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.TelemetryMessage.PositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_absolute_altitude_m = from._internal_absolute_altitude_m();
  uint32_t raw_absolute_altitude_m;
  memcpy(&raw_absolute_altitude_m, &tmp_absolute_altitude_m, sizeof(tmp_absolute_altitude_m));
  if (raw_absolute_altitude_m != 0) {
    _internal_set_absolute_altitude_m(from._internal_absolute_altitude_m());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_relative_altitude_m = from._internal_relative_altitude_m();
  uint32_t raw_relative_altitude_m;
  memcpy(&raw_relative_altitude_m, &tmp_relative_altitude_m, sizeof(tmp_relative_altitude_m));
  if (raw_relative_altitude_m != 0) {
    _internal_set_relative_altitude_m(from._internal_relative_altitude_m());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryMessage_PositionInfo::CopyFrom(const TelemetryMessage_PositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.TelemetryMessage.PositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryMessage_PositionInfo::IsInitialized() const {
  return true;
}

void TelemetryMessage_PositionInfo::InternalSwap(TelemetryMessage_PositionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryMessage_PositionInfo, relative_altitude_m_)
      + sizeof(TelemetryMessage_PositionInfo::relative_altitude_m_)
      - PROTOBUF_FIELD_OFFSET(TelemetryMessage_PositionInfo, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryMessage_PositionInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_getter, &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_once,
      file_level_metadata_msg_2ftelemetry_2dmessage_2eproto[1]);
}

// ===================================================================

class TelemetryMessage_PositionVelocityNed_PositionNed::_Internal {
 public:
};

TelemetryMessage_PositionVelocityNed_PositionNed::TelemetryMessage_PositionVelocityNed_PositionNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
}
TelemetryMessage_PositionVelocityNed_PositionNed::TelemetryMessage_PositionVelocityNed_PositionNed(const TelemetryMessage_PositionVelocityNed_PositionNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&north_m_, &from.north_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_) -
    reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
  // @@protoc_insertion_point(copy_constructor:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
}

inline void TelemetryMessage_PositionVelocityNed_PositionNed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&north_m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_m_) -
    reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
}

TelemetryMessage_PositionVelocityNed_PositionNed::~TelemetryMessage_PositionVelocityNed_PositionNed() {
  // @@protoc_insertion_point(destructor:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetryMessage_PositionVelocityNed_PositionNed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TelemetryMessage_PositionVelocityNed_PositionNed::ArenaDtor(void* object) {
  TelemetryMessage_PositionVelocityNed_PositionNed* _this = reinterpret_cast< TelemetryMessage_PositionVelocityNed_PositionNed* >(object);
  (void)_this;
}
void TelemetryMessage_PositionVelocityNed_PositionNed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryMessage_PositionVelocityNed_PositionNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryMessage_PositionVelocityNed_PositionNed::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_) -
      reinterpret_cast<char*>(&north_m_)) + sizeof(down_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryMessage_PositionVelocityNed_PositionNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float north_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          north_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float east_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          east_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float down_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          down_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryMessage_PositionVelocityNed_PositionNed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_north_m = this->_internal_north_m();
  uint32_t raw_north_m;
  memcpy(&raw_north_m, &tmp_north_m, sizeof(tmp_north_m));
  if (raw_north_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m(), target);
  }

  // float east_m = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_east_m = this->_internal_east_m();
  uint32_t raw_east_m;
  memcpy(&raw_east_m, &tmp_east_m, sizeof(tmp_east_m));
  if (raw_east_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m(), target);
  }

  // float down_m = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_down_m = this->_internal_down_m();
  uint32_t raw_down_m;
  memcpy(&raw_down_m, &tmp_down_m, sizeof(tmp_down_m));
  if (raw_down_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
  return target;
}

size_t TelemetryMessage_PositionVelocityNed_PositionNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_north_m = this->_internal_north_m();
  uint32_t raw_north_m;
  memcpy(&raw_north_m, &tmp_north_m, sizeof(tmp_north_m));
  if (raw_north_m != 0) {
    total_size += 1 + 4;
  }

  // float east_m = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_east_m = this->_internal_east_m();
  uint32_t raw_east_m;
  memcpy(&raw_east_m, &tmp_east_m, sizeof(tmp_east_m));
  if (raw_east_m != 0) {
    total_size += 1 + 4;
  }

  // float down_m = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_down_m = this->_internal_down_m();
  uint32_t raw_down_m;
  memcpy(&raw_down_m, &tmp_down_m, sizeof(tmp_down_m));
  if (raw_down_m != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryMessage_PositionVelocityNed_PositionNed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryMessage_PositionVelocityNed_PositionNed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryMessage_PositionVelocityNed_PositionNed::GetClassData() const { return &_class_data_; }

void TelemetryMessage_PositionVelocityNed_PositionNed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryMessage_PositionVelocityNed_PositionNed *>(to)->MergeFrom(
      static_cast<const TelemetryMessage_PositionVelocityNed_PositionNed &>(from));
}


void TelemetryMessage_PositionVelocityNed_PositionNed::MergeFrom(const TelemetryMessage_PositionVelocityNed_PositionNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_north_m = from._internal_north_m();
  uint32_t raw_north_m;
  memcpy(&raw_north_m, &tmp_north_m, sizeof(tmp_north_m));
  if (raw_north_m != 0) {
    _internal_set_north_m(from._internal_north_m());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_east_m = from._internal_east_m();
  uint32_t raw_east_m;
  memcpy(&raw_east_m, &tmp_east_m, sizeof(tmp_east_m));
  if (raw_east_m != 0) {
    _internal_set_east_m(from._internal_east_m());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_down_m = from._internal_down_m();
  uint32_t raw_down_m;
  memcpy(&raw_down_m, &tmp_down_m, sizeof(tmp_down_m));
  if (raw_down_m != 0) {
    _internal_set_down_m(from._internal_down_m());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryMessage_PositionVelocityNed_PositionNed::CopyFrom(const TelemetryMessage_PositionVelocityNed_PositionNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.TelemetryMessage.PositionVelocityNed.PositionNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryMessage_PositionVelocityNed_PositionNed::IsInitialized() const {
  return true;
}

void TelemetryMessage_PositionVelocityNed_PositionNed::InternalSwap(TelemetryMessage_PositionVelocityNed_PositionNed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryMessage_PositionVelocityNed_PositionNed, down_m_)
      + sizeof(TelemetryMessage_PositionVelocityNed_PositionNed::down_m_)
      - PROTOBUF_FIELD_OFFSET(TelemetryMessage_PositionVelocityNed_PositionNed, north_m_)>(
          reinterpret_cast<char*>(&north_m_),
          reinterpret_cast<char*>(&other->north_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryMessage_PositionVelocityNed_PositionNed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_getter, &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_once,
      file_level_metadata_msg_2ftelemetry_2dmessage_2eproto[2]);
}

// ===================================================================

class TelemetryMessage_PositionVelocityNed_VelocityNed::_Internal {
 public:
};

TelemetryMessage_PositionVelocityNed_VelocityNed::TelemetryMessage_PositionVelocityNed_VelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
}
TelemetryMessage_PositionVelocityNed_VelocityNed::TelemetryMessage_PositionVelocityNed_VelocityNed(const TelemetryMessage_PositionVelocityNed_VelocityNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&north_m_s_, &from.north_m_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&down_m_s_) -
    reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
  // @@protoc_insertion_point(copy_constructor:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
}

inline void TelemetryMessage_PositionVelocityNed_VelocityNed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&north_m_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&down_m_s_) -
    reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
}

TelemetryMessage_PositionVelocityNed_VelocityNed::~TelemetryMessage_PositionVelocityNed_VelocityNed() {
  // @@protoc_insertion_point(destructor:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetryMessage_PositionVelocityNed_VelocityNed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TelemetryMessage_PositionVelocityNed_VelocityNed::ArenaDtor(void* object) {
  TelemetryMessage_PositionVelocityNed_VelocityNed* _this = reinterpret_cast< TelemetryMessage_PositionVelocityNed_VelocityNed* >(object);
  (void)_this;
}
void TelemetryMessage_PositionVelocityNed_VelocityNed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryMessage_PositionVelocityNed_VelocityNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryMessage_PositionVelocityNed_VelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&north_m_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&down_m_s_) -
      reinterpret_cast<char*>(&north_m_s_)) + sizeof(down_m_s_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryMessage_PositionVelocityNed_VelocityNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float north_m_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          north_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float east_m_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          east_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float down_m_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          down_m_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryMessage_PositionVelocityNed_VelocityNed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float north_m_s = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_north_m_s = this->_internal_north_m_s();
  uint32_t raw_north_m_s;
  memcpy(&raw_north_m_s, &tmp_north_m_s, sizeof(tmp_north_m_s));
  if (raw_north_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_north_m_s(), target);
  }

  // float east_m_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_east_m_s = this->_internal_east_m_s();
  uint32_t raw_east_m_s;
  memcpy(&raw_east_m_s, &tmp_east_m_s, sizeof(tmp_east_m_s));
  if (raw_east_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_east_m_s(), target);
  }

  // float down_m_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_down_m_s = this->_internal_down_m_s();
  uint32_t raw_down_m_s;
  memcpy(&raw_down_m_s, &tmp_down_m_s, sizeof(tmp_down_m_s));
  if (raw_down_m_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_down_m_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
  return target;
}

size_t TelemetryMessage_PositionVelocityNed_VelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float north_m_s = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_north_m_s = this->_internal_north_m_s();
  uint32_t raw_north_m_s;
  memcpy(&raw_north_m_s, &tmp_north_m_s, sizeof(tmp_north_m_s));
  if (raw_north_m_s != 0) {
    total_size += 1 + 4;
  }

  // float east_m_s = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_east_m_s = this->_internal_east_m_s();
  uint32_t raw_east_m_s;
  memcpy(&raw_east_m_s, &tmp_east_m_s, sizeof(tmp_east_m_s));
  if (raw_east_m_s != 0) {
    total_size += 1 + 4;
  }

  // float down_m_s = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_down_m_s = this->_internal_down_m_s();
  uint32_t raw_down_m_s;
  memcpy(&raw_down_m_s, &tmp_down_m_s, sizeof(tmp_down_m_s));
  if (raw_down_m_s != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryMessage_PositionVelocityNed_VelocityNed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryMessage_PositionVelocityNed_VelocityNed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryMessage_PositionVelocityNed_VelocityNed::GetClassData() const { return &_class_data_; }

void TelemetryMessage_PositionVelocityNed_VelocityNed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryMessage_PositionVelocityNed_VelocityNed *>(to)->MergeFrom(
      static_cast<const TelemetryMessage_PositionVelocityNed_VelocityNed &>(from));
}


void TelemetryMessage_PositionVelocityNed_VelocityNed::MergeFrom(const TelemetryMessage_PositionVelocityNed_VelocityNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_north_m_s = from._internal_north_m_s();
  uint32_t raw_north_m_s;
  memcpy(&raw_north_m_s, &tmp_north_m_s, sizeof(tmp_north_m_s));
  if (raw_north_m_s != 0) {
    _internal_set_north_m_s(from._internal_north_m_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_east_m_s = from._internal_east_m_s();
  uint32_t raw_east_m_s;
  memcpy(&raw_east_m_s, &tmp_east_m_s, sizeof(tmp_east_m_s));
  if (raw_east_m_s != 0) {
    _internal_set_east_m_s(from._internal_east_m_s());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_down_m_s = from._internal_down_m_s();
  uint32_t raw_down_m_s;
  memcpy(&raw_down_m_s, &tmp_down_m_s, sizeof(tmp_down_m_s));
  if (raw_down_m_s != 0) {
    _internal_set_down_m_s(from._internal_down_m_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryMessage_PositionVelocityNed_VelocityNed::CopyFrom(const TelemetryMessage_PositionVelocityNed_VelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.TelemetryMessage.PositionVelocityNed.VelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryMessage_PositionVelocityNed_VelocityNed::IsInitialized() const {
  return true;
}

void TelemetryMessage_PositionVelocityNed_VelocityNed::InternalSwap(TelemetryMessage_PositionVelocityNed_VelocityNed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryMessage_PositionVelocityNed_VelocityNed, down_m_s_)
      + sizeof(TelemetryMessage_PositionVelocityNed_VelocityNed::down_m_s_)
      - PROTOBUF_FIELD_OFFSET(TelemetryMessage_PositionVelocityNed_VelocityNed, north_m_s_)>(
          reinterpret_cast<char*>(&north_m_s_),
          reinterpret_cast<char*>(&other->north_m_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryMessage_PositionVelocityNed_VelocityNed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_getter, &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_once,
      file_level_metadata_msg_2ftelemetry_2dmessage_2eproto[3]);
}

// ===================================================================

class TelemetryMessage_PositionVelocityNed::_Internal {
 public:
  static const ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed& position(const TelemetryMessage_PositionVelocityNed* msg);
  static const ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed& velocity(const TelemetryMessage_PositionVelocityNed* msg);
};

const ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed&
TelemetryMessage_PositionVelocityNed::_Internal::position(const TelemetryMessage_PositionVelocityNed* msg) {
  return *msg->position_;
}
const ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed&
TelemetryMessage_PositionVelocityNed::_Internal::velocity(const TelemetryMessage_PositionVelocityNed* msg) {
  return *msg->velocity_;
}
TelemetryMessage_PositionVelocityNed::TelemetryMessage_PositionVelocityNed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3.TelemetryMessage.PositionVelocityNed)
}
TelemetryMessage_PositionVelocityNed::TelemetryMessage_PositionVelocityNed(const TelemetryMessage_PositionVelocityNed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ns3.TelemetryMessage.PositionVelocityNed)
}

inline void TelemetryMessage_PositionVelocityNed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&velocity_) -
    reinterpret_cast<char*>(&position_)) + sizeof(velocity_));
}

TelemetryMessage_PositionVelocityNed::~TelemetryMessage_PositionVelocityNed() {
  // @@protoc_insertion_point(destructor:ns3.TelemetryMessage.PositionVelocityNed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetryMessage_PositionVelocityNed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
}

void TelemetryMessage_PositionVelocityNed::ArenaDtor(void* object) {
  TelemetryMessage_PositionVelocityNed* _this = reinterpret_cast< TelemetryMessage_PositionVelocityNed* >(object);
  (void)_this;
}
void TelemetryMessage_PositionVelocityNed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryMessage_PositionVelocityNed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryMessage_PositionVelocityNed::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.TelemetryMessage.PositionVelocityNed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryMessage_PositionVelocityNed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ns3.TelemetryMessage.PositionVelocityNed.PositionNed position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3.TelemetryMessage.PositionVelocityNed.VelocityNed velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryMessage_PositionVelocityNed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.TelemetryMessage.PositionVelocityNed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ns3.TelemetryMessage.PositionVelocityNed.PositionNed position = 1;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .ns3.TelemetryMessage.PositionVelocityNed.VelocityNed velocity = 2;
  if (this->_internal_has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.TelemetryMessage.PositionVelocityNed)
  return target;
}

size_t TelemetryMessage_PositionVelocityNed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.TelemetryMessage.PositionVelocityNed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ns3.TelemetryMessage.PositionVelocityNed.PositionNed position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .ns3.TelemetryMessage.PositionVelocityNed.VelocityNed velocity = 2;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryMessage_PositionVelocityNed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryMessage_PositionVelocityNed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryMessage_PositionVelocityNed::GetClassData() const { return &_class_data_; }

void TelemetryMessage_PositionVelocityNed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryMessage_PositionVelocityNed *>(to)->MergeFrom(
      static_cast<const TelemetryMessage_PositionVelocityNed &>(from));
}


void TelemetryMessage_PositionVelocityNed::MergeFrom(const TelemetryMessage_PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.TelemetryMessage.PositionVelocityNed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::ns3::TelemetryMessage_PositionVelocityNed_PositionNed::MergeFrom(from._internal_position());
  }
  if (from._internal_has_velocity()) {
    _internal_mutable_velocity()->::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed::MergeFrom(from._internal_velocity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryMessage_PositionVelocityNed::CopyFrom(const TelemetryMessage_PositionVelocityNed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.TelemetryMessage.PositionVelocityNed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryMessage_PositionVelocityNed::IsInitialized() const {
  return true;
}

void TelemetryMessage_PositionVelocityNed::InternalSwap(TelemetryMessage_PositionVelocityNed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryMessage_PositionVelocityNed, velocity_)
      + sizeof(TelemetryMessage_PositionVelocityNed::velocity_)
      - PROTOBUF_FIELD_OFFSET(TelemetryMessage_PositionVelocityNed, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryMessage_PositionVelocityNed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_getter, &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_once,
      file_level_metadata_msg_2ftelemetry_2dmessage_2eproto[4]);
}

// ===================================================================

class TelemetryMessage::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated(const TelemetryMessage* msg);
  static const ::ns3::TelemetryMessage_BatteryInfo& battery(const TelemetryMessage* msg);
  static const ::ns3::TelemetryMessage_PositionInfo& position(const TelemetryMessage* msg);
  static const ::ns3::TelemetryMessage_PositionVelocityNed& positionvelocityned(const TelemetryMessage* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TelemetryMessage::_Internal::last_updated(const TelemetryMessage* msg) {
  return *msg->last_updated_;
}
const ::ns3::TelemetryMessage_BatteryInfo&
TelemetryMessage::_Internal::battery(const TelemetryMessage* msg) {
  return *msg->battery_;
}
const ::ns3::TelemetryMessage_PositionInfo&
TelemetryMessage::_Internal::position(const TelemetryMessage* msg) {
  return *msg->position_;
}
const ::ns3::TelemetryMessage_PositionVelocityNed&
TelemetryMessage::_Internal::positionvelocityned(const TelemetryMessage* msg) {
  return *msg->positionvelocityned_;
}
void TelemetryMessage::clear_last_updated() {
  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
TelemetryMessage::TelemetryMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ns3.TelemetryMessage)
}
TelemetryMessage::TelemetryMessage(const TelemetryMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_updated()) {
    last_updated_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = nullptr;
  }
  if (from._internal_has_battery()) {
    battery_ = new ::ns3::TelemetryMessage_BatteryInfo(*from.battery_);
  } else {
    battery_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::ns3::TelemetryMessage_PositionInfo(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_positionvelocityned()) {
    positionvelocityned_ = new ::ns3::TelemetryMessage_PositionVelocityNed(*from.positionvelocityned_);
  } else {
    positionvelocityned_ = nullptr;
  }
  ::memcpy(&uavarrivaltime_, &from.uavarrivaltime_,
    static_cast<size_t>(reinterpret_cast<char*>(&gcsarrivaltime_) -
    reinterpret_cast<char*>(&uavarrivaltime_)) + sizeof(gcsarrivaltime_));
  // @@protoc_insertion_point(copy_constructor:ns3.TelemetryMessage)
}

inline void TelemetryMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_updated_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gcsarrivaltime_) -
    reinterpret_cast<char*>(&last_updated_)) + sizeof(gcsarrivaltime_));
}

TelemetryMessage::~TelemetryMessage() {
  // @@protoc_insertion_point(destructor:ns3.TelemetryMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TelemetryMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete last_updated_;
  if (this != internal_default_instance()) delete battery_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete positionvelocityned_;
}

void TelemetryMessage::ArenaDtor(void* object) {
  TelemetryMessage* _this = reinterpret_cast< TelemetryMessage* >(object);
  (void)_this;
}
void TelemetryMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ns3.TelemetryMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
  if (GetArenaForAllocation() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && positionvelocityned_ != nullptr) {
    delete positionvelocityned_;
  }
  positionvelocityned_ = nullptr;
  ::memset(&uavarrivaltime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gcsarrivaltime_) -
      reinterpret_cast<char*>(&uavarrivaltime_)) + sizeof(gcsarrivaltime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 uavID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uavid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 uavArrivalTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uavarrivaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 gcsArrivalTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          gcsarrivaltime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3.TelemetryMessage.UpdateType update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_update(static_cast<::ns3::TelemetryMessage_UpdateType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_updated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3.TelemetryMessage.BatteryInfo battery = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3.TelemetryMessage.PositionInfo position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ns3.TelemetryMessage.PositionVelocityNed positionVelocityNed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_positionvelocityned(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ns3.TelemetryMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 uavID = 1;
  if (this->_internal_uavid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_uavid(), target);
  }

  // int64 uavArrivalTime = 2;
  if (this->_internal_uavarrivaltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_uavarrivaltime(), target);
  }

  // int64 gcsArrivalTime = 3;
  if (this->_internal_gcsarrivaltime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_gcsarrivaltime(), target);
  }

  // .ns3.TelemetryMessage.UpdateType update = 4;
  if (this->_internal_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_update(), target);
  }

  // .google.protobuf.Timestamp last_updated = 5;
  if (this->_internal_has_last_updated()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::last_updated(this), target, stream);
  }

  // .ns3.TelemetryMessage.BatteryInfo battery = 6;
  if (this->_internal_has_battery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::battery(this), target, stream);
  }

  // .ns3.TelemetryMessage.PositionInfo position = 7;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::position(this), target, stream);
  }

  // .ns3.TelemetryMessage.PositionVelocityNed positionVelocityNed = 8;
  if (this->_internal_has_positionvelocityned()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::positionvelocityned(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ns3.TelemetryMessage)
  return target;
}

size_t TelemetryMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ns3.TelemetryMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp last_updated = 5;
  if (this->_internal_has_last_updated()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_);
  }

  // .ns3.TelemetryMessage.BatteryInfo battery = 6;
  if (this->_internal_has_battery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *battery_);
  }

  // .ns3.TelemetryMessage.PositionInfo position = 7;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .ns3.TelemetryMessage.PositionVelocityNed positionVelocityNed = 8;
  if (this->_internal_has_positionvelocityned()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *positionvelocityned_);
  }

  // int64 uavArrivalTime = 2;
  if (this->_internal_uavarrivaltime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_uavarrivaltime());
  }

  // int32 uavID = 1;
  if (this->_internal_uavid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_uavid());
  }

  // .ns3.TelemetryMessage.UpdateType update = 4;
  if (this->_internal_update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_update());
  }

  // int64 gcsArrivalTime = 3;
  if (this->_internal_gcsarrivaltime() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_gcsarrivaltime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryMessage::GetClassData() const { return &_class_data_; }

void TelemetryMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryMessage *>(to)->MergeFrom(
      static_cast<const TelemetryMessage &>(from));
}


void TelemetryMessage::MergeFrom(const TelemetryMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ns3.TelemetryMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_last_updated()) {
    _internal_mutable_last_updated()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_updated());
  }
  if (from._internal_has_battery()) {
    _internal_mutable_battery()->::ns3::TelemetryMessage_BatteryInfo::MergeFrom(from._internal_battery());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::ns3::TelemetryMessage_PositionInfo::MergeFrom(from._internal_position());
  }
  if (from._internal_has_positionvelocityned()) {
    _internal_mutable_positionvelocityned()->::ns3::TelemetryMessage_PositionVelocityNed::MergeFrom(from._internal_positionvelocityned());
  }
  if (from._internal_uavarrivaltime() != 0) {
    _internal_set_uavarrivaltime(from._internal_uavarrivaltime());
  }
  if (from._internal_uavid() != 0) {
    _internal_set_uavid(from._internal_uavid());
  }
  if (from._internal_update() != 0) {
    _internal_set_update(from._internal_update());
  }
  if (from._internal_gcsarrivaltime() != 0) {
    _internal_set_gcsarrivaltime(from._internal_gcsarrivaltime());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryMessage::CopyFrom(const TelemetryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ns3.TelemetryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryMessage::IsInitialized() const {
  return true;
}

void TelemetryMessage::InternalSwap(TelemetryMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TelemetryMessage, gcsarrivaltime_)
      + sizeof(TelemetryMessage::gcsarrivaltime_)
      - PROTOBUF_FIELD_OFFSET(TelemetryMessage, last_updated_)>(
          reinterpret_cast<char*>(&last_updated_),
          reinterpret_cast<char*>(&other->last_updated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_getter, &descriptor_table_msg_2ftelemetry_2dmessage_2eproto_once,
      file_level_metadata_msg_2ftelemetry_2dmessage_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ns3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ns3::TelemetryMessage_BatteryInfo* Arena::CreateMaybeMessage< ::ns3::TelemetryMessage_BatteryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::TelemetryMessage_BatteryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3::TelemetryMessage_PositionInfo* Arena::CreateMaybeMessage< ::ns3::TelemetryMessage_PositionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::TelemetryMessage_PositionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed* Arena::CreateMaybeMessage< ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::TelemetryMessage_PositionVelocityNed_PositionNed >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed* Arena::CreateMaybeMessage< ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::TelemetryMessage_PositionVelocityNed_VelocityNed >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3::TelemetryMessage_PositionVelocityNed* Arena::CreateMaybeMessage< ::ns3::TelemetryMessage_PositionVelocityNed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::TelemetryMessage_PositionVelocityNed >(arena);
}
template<> PROTOBUF_NOINLINE ::ns3::TelemetryMessage* Arena::CreateMaybeMessage< ::ns3::TelemetryMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ns3::TelemetryMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
